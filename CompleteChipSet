CHIP Nand {
    IN  a, b;
    OUT out;
    BUILTIN Nand;
}

CHIP Not {
    IN in;
    OUT out;
    PARTS:
    	Nand(a=in,b=in,out=out);
}

CHIP And {
    IN a, b;
    OUT out
    PARTS:
	Nand(a=a,b=b,out=aNandb);
	Not(in=aNandb,out=out);
}

CHIP Or {
    IN a, b;
    OUT out;
    PARTS:
  	Not(in=a,out=nota);
  	Not(in=b,out=notb);
  	And(a=nota,b=notb,out=notaAndNotb);
  	Not(in=notaAndNotb,out=out);
}

CHIP Xor {
    IN a, b;
    OUT out;
    PARTS:
  	Nand(a=a,b=b,out=aNandb);
  	Or(a=a,b=b,out=aOrb);
  	And(a=aNandb,b=aOrb,out=out);
}

CHIP Mux {
    IN a, b, sel;
    OUT out;
    PARTS:
        Not(in=sel,out=notsel);
        And(a=a,b=notsel,out=aAndNotsel);
        And(a=b,b=sel,out=bAndsel);
        Or(a=aAndNotsel,b=bAndsel,out=out);
}

CHIP DMux {
    IN in, sel;
    OUT a, b;
    PARTS:
	Not(in=sel,out=notsel);
	And(a=in,b=notsel,out=a);
	And(a=in,b=sel,out=b);
}

CHIP Not16 {
    IN in[16];
    OUT out[16];
    PARTS:
  	Not(in=in[0],out=out[0]);
  	Not(in=in[1],out=out[1]);
  	Not(in=in[2],out=out[2]);
  	Not(in=in[3],out=out[3]);
  	Not(in=in[4],out=out[4]);
  	Not(in=in[5],out=out[5]);
  	Not(in=in[6],out=out[6]);
  	Not(in=in[7],out=out[7]);
  	Not(in=in[8],out=out[8]);
  	Not(in=in[9],out=out[9]);
  	Not(in=in[10],out=out[10]);
  	Not(in=in[11],out=out[11]);
  	Not(in=in[12],out=out[12]);
  	Not(in=in[13],out=out[13]);
  	Not(in=in[14],out=out[14]);
  	Not(in=in[15],out=out[15]);
}

CHIP And16 {
    IN a[16], b[16];
    OUT out[16];
    PARTS:
	And(a=a[0],b=b[0],out=out[0]);
	And(a=a[1],b=b[1],out=out[1]);
	And(a=a[2],b=b[2],out=out[2]);
	And(a=a[3],b=b[3],out=out[3]);
	And(a=a[4],b=b[4],out=out[4]);
	And(a=a[5],b=b[5],out=out[5]);
	And(a=a[6],b=b[6],out=out[6]);
	And(a=a[7],b=b[7],out=out[7]);
	And(a=a[8],b=b[8],out=out[8]);
	And(a=a[9],b=b[9],out=out[9]);
	And(a=a[10],b=b[10],out=out[10]);
	And(a=a[11],b=b[11],out=out[11]);
	And(a=a[12],b=b[12],out=out[12]);
	And(a=a[13],b=b[13],out=out[13]);
	And(a=a[14],b=b[14],out=out[14]);
	And(a=a[15],b=b[15],out=out[15]);
}

CHIP Or16 {
    IN a[16], b[16];
    OUT out[16];
    PARTS:
  	Not16(in=a,out=nota);
  	Not16(in=b,out=notb);
  	And16(a=nota,b=notb,out=notaAndNotb);
 	Not16(in=notaAndNotb, out=out);
}

CHIP Mux16 {
    IN a[16], b[16], sel;
    OUT out[16];
    PARTS:
	Mux(a=a[0], b=b[0], sel=sel, out=out[0]);
	Mux(a=a[1], b=b[1], sel=sel, out=out[1]);
	Mux(a=a[2], b=b[2], sel=sel, out=out[2]);
	Mux(a=a[3], b=b[3], sel=sel, out=out[3]);
	Mux(a=a[4], b=b[4], sel=sel, out=out[4]);
	Mux(a=a[5], b=b[5], sel=sel, out=out[5]);
	Mux(a=a[6], b=b[6], sel=sel, out=out[6]);
	Mux(a=a[7], b=b[7], sel=sel, out=out[7]);
	Mux(a=a[8], b=b[8], sel=sel, out=out[8]);
	Mux(a=a[9], b=b[9], sel=sel, out=out[9]);
	Mux(a=a[10], b=b[10], sel=sel, out=out[10]);
	Mux(a=a[11], b=b[11], sel=sel, out=out[11]);
	Mux(a=a[12], b=b[12], sel=sel, out=out[12]);
	Mux(a=a[13], b=b[13], sel=sel, out=out[13]);
	Mux(a=a[14], b=b[14], sel=sel, out=out[14]);
	Mux(a=a[15], b=b[15], sel=sel, out=out[15]);
}

CHIP Or8Way {
    IN in[8];
    OUT out;
    PARTS:
  	Or(a=in[0],b=in[1],out=firstOr);
  	Or(a=in[2],b=in[3],out=secondOr);
  	Or(a=in[4],b=in[5],out=thirdOr);
  	Or(a=in[6],b=in[7],out=fourthOr);
  	Or(a=firstOr,b=secondOr,out=lowerOr);
  	Or(a=thirdOr,b=fourthOr,out=upperOr);
  	Or(a=lowerOr,b=upperOr,out=out);
}

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];
    PARTS:
	Mux16(a=a,b=b,sel=sel[0],out=firstMux);
	Mux16(a=c,b=d,sel=sel[0],out=secondMux);
	Mux16(a=firstMux,b=secondMux,sel=sel[1],out=out);
}

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16], e[16], f[16], g[16], h[16], sel[3];
    OUT out[16];
    PARTS:
	Mux4Way16(a=a,b=b,c=c,d=d,sel=sel[0..1],out=firstMux);
	Mux4Way16(a=e,b=f,c=g,d=h,sel=sel[0..1],out=secondMux);
	Mux16(a=firstMux,b=secondMux,sel=sel[2],out=out);
}

CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;
    PARTS:
    	Not(in=sel[0],out=notsel0);
	Not(in=sel[1],out=notsel1);
	And(a=in,b=notsel1,out=inAndNotsel1);
	And(a=in,b=sel[1],out=inAndsel1);
	And(a=inAndNotsel1,b=notsel0,out=a);
	And(a=inAndNotsel1,b=sel[0],out=b);
	And(a=inAndsel1,b=notsel0,out=c);
	And(a=inAndsel1,b=sel[0],out=d);
}

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;
    PARTS:
  	Not(in=sel[2],out=notsel2);
  	Not(in=sel[1],out=notsel1);
  	Not(in=sel[0],out=notsel0);
  	And(a=in,b=notsel2,out=inAndNotsel2);
  	And(a=in,b=sel[2],out=inAndsel2);
  	And(a=notsel1,b=notsel0,out=notsel1AndNotsel0);
  	And(a=notsel1,b=sel[0],out=notsel1Andsel0);
  	And(a=sel[1],b=notsel0,out=sel1AndNotsel0);
  	And(a=sel[1],b=sel[0],out=sel1Andsel0);
  	And(a=inAndNotsel2,b=notsel1AndNotsel0,out=a);
  	And(a=inAndNotsel2,b=notsel1Andsel0,out=b);
  	And(a=inAndNotsel2,b=sel1AndNotsel0,out=c);
  	And(a=inAndNotsel2,b=sel1Andsel0,out=d);
  	And(a=inAndsel2,b=notsel1AndNotsel0,out=e);
  	And(a=inAndsel2,b=notsel1Andsel0,out=f);
  	And(a=inAndsel2,b=sel1AndNotsel0,out=g);
  	And(a=inAndsel2,b=sel1Andsel0,out=h);
}

CHIP HalfAdder {
    IN a, b;
    OUT sum, carry;
    PARTS:
	Xor(a=a,b=b,out=sum);
	And(a=a,b=b,out=carry);
}

CHIP FullAdder {
    IN a, b, c;
    OUT sum, carry;
    PARTS:
	Xor(a=a,b=b,out=aXorb);
	Xor(a=aXorb,b=c,out=sum);
	Not(in=b,out=notb);
	And(a=a,b=notb,out=aAndNotb);
	And(a=aAndNotb,b=c,out=aAndNotbAndc);
	Not(in=c,out=notc);
	And(a=a,b=b,out=aAndb);
	And(a=aAndb,b=notc,out=aAndbAndNotc);
	And(a=b,b=c,out=bAndc);
	Or(a=aAndbAndNotc,b=aAndNotbAndc,out=firstOr);
	Or(a=firstOr,b=bAndc,out=carry);
}

CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];
    PARTS:
      	HalfAdder(a=a[0],b=b[0],sum=out[0],carry=carry1);
      	FullAdder(a=a[1],b=b[1],c=carry1,sum=out[1],carry=carry2);
      	FullAdder(a=a[2],b=b[2],c=carry2,sum=out[2],carry=carry3);
      	FullAdder(a=a[3],b=b[3],c=carry3,sum=out[3],carry=carry4);
      	FullAdder(a=a[4],b=b[4],c=carry4,sum=out[4],carry=carry5);
      	FullAdder(a=a[5],b=b[5],c=carry5,sum=out[5],carry=carry6);
      	FullAdder(a=a[6],b=b[6],c=carry6,sum=out[6],carry=carry7);
      	FullAdder(a=a[7],b=b[7],c=carry7,sum=out[7],carry=carry8);
      	FullAdder(a=a[8],b=b[8],c=carry8,sum=out[8],carry=carry9);
      	FullAdder(a=a[9],b=b[9],c=carry9,sum=out[9],carry=carry10);
      	FullAdder(a=a[10],b=b[10],c=carry10,sum=out[10],carry=carry11);
      	FullAdder(a=a[11],b=b[11],c=carry11,sum=out[11],carry=carry12);
      	FullAdder(a=a[12],b=b[12],c=carry12,sum=out[12],carry=carry13);
      	FullAdder(a=a[13],b=b[13],c=carry13,sum=out[13],carry=carry14);
      	FullAdder(a=a[14],b=b[14],c=carry14,sum=out[14],carry=carry15);
      	Xor(a=a[15],b=b[15],out=a15Xorb15);
      	Xor(a=a15Xorb15,b=carry15,out=out[15]);
}

CHIP Inc16 {
    IN in[16];
    OUT out[16];
    PARTS:
	Add16(a=in,b[0]=true,b[1..15]=false,out=out);
}

CHIP ALU {
    IN x[16], y[16], zx, nx, zy, ny, f, no; 
    OUT out[16], zr, ng;
    PARTS:
	Mux16(a=x,b=false,sel=zx,out=tempx1);
	Not16(in=tempx1,out=notx);
	Mux16(a=tempx1,b=notx,sel=nx,out=tempx2);
	Mux16(a=y,b=false,sel=zy,out=tempy1);
	Not16(in=tempy1,out=noty);
	Mux16(a=tempy1,b=noty,sel=ny, out=tempy2);
	And16(a=tempx2,b=tempy2,out=xAndy);
	Add16(a=tempx2,b=tempy2,out=addxy);
	Mux16(a=xAndy,b=addxy,sel=f,out=tempout1);
	Not16(in=tempout1,out=notout);
	Mux16(a=tempout1,b=notout,sel=no,out=out,out[0..7]=firsthalf, out[8..15]=secondhalf,out[15]=firstbit);
	Or8Way(in=firsthalf,out=firstor);
	Or8Way(in=secondhalf,out=secondor);
	Or(a=firstor,b=secondor,out=outor);
	Xor(a=outor, b=true, out=zr);
	And(a=firstbit,b=true,out=ng);
}

CHIP DFF {
    IN  in;
    OUT out;
    BUILTIN DFF;
    CLOCKED in;
}


CHIP Bit {
    IN in, load;
    OUT out;
    PARTS:
    	Mux(a=dffout,b=in,sel=load,out=dffin);
	DFF(in=dffin,out=dffout, out=out);
}

CHIP Register {
    IN in[16], load;
    OUT out[16];
    PARTS:
    	Bit(in=in[0], load=load, out=out[0]);
	Bit(in=in[1], load=load, out=out[1]);
	Bit(in=in[2], load=load, out=out[2]);
	Bit(in=in[3], load=load, out=out[3]);
	Bit(in=in[4], load=load, out=out[4]);
	Bit(in=in[5], load=load, out=out[5]);
	Bit(in=in[6], load=load, out=out[6]);
	Bit(in=in[7], load=load, out=out[7]);
	Bit(in=in[8], load=load, out=out[8]);
	Bit(in=in[9], load=load, out=out[9]);
	Bit(in=in[10], load=load, out=out[10]);
	Bit(in=in[11], load=load, out=out[11]);
	Bit(in=in[12], load=load, out=out[12]);
	Bit(in=in[13], load=load, out=out[13]);
	Bit(in=in[14], load=load, out=out[14]);
	Bit(in=in[15], load=load, out=out[15]);
}

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];
    PARTS:
  	DMux8Way(in=load,sel=address,a=load0,b=load1,c=load2,d=load3,e=load4,f=load5,g=load6,h=load7);
  	Register(in=in,load=load0,out=out0);
  	Register(in=in,load=load1,out=out1);
  	Register(in=in,load=load2,out=out2);
  	Register(in=in,load=load3,out=out3);
  	Register(in=in,load=load4,out=out4);
  	Register(in=in,load=load5,out=out5);
  	Register(in=in,load=load6,out=out6);
  	Register(in=in,load=load7,out=out7);
  	Mux8Way16(a=out0,b=out1,c=out2,d=out3,e=out4,f=out5,g=out6,h=out7,sel=address,out=out);
}

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];
    PARTS:
  	DMux8Way(in=load,sel=address[3..5],a=load0,b=load1,c=load2,d=load3,e=load4,f=load5,g=load6,h=load7);
  	RAM8(in=in,load=load0,address=address[0..2],out=out0);
  	RAM8(in=in,load=load1,address=address[0..2],out=out1);
  	RAM8(in=in,load=load2,address=address[0..2],out=out2);
  	RAM8(in=in,load=load3,address=address[0..2],out=out3);
  	RAM8(in=in,load=load4,address=address[0..2],out=out4);
  	RAM8(in=in,load=load5,address=address[0..2],out=out5);
  	RAM8(in=in,load=load6,address=address[0..2],out=out6);
  	RAM8(in=in,load=load7,address=address[0..2],out=out7);
  	Mux8Way16(a=out0,b=out1,c=out2,d=out3,e=out4,f=out5,g=out6,h=out7,sel=address[3..5],out=out);
}

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];
    PARTS:
  	DMux8Way(in=load,sel=address[6..8],a=load0,b=load1,c=load2,d=load3,e=load4,f=load5,g=load6,h=load7);
  	RAM64(in=in,load=load0,address=address[0..5],out=out0);
  	RAM64(in=in,load=load1,address=address[0..5],out=out1);
  	RAM64(in=in,load=load2,address=address[0..5],out=out2);
  	RAM64(in=in,load=load3,address=address[0..5],out=out3);
  	RAM64(in=in,load=load4,address=address[0..5],out=out4);
  	RAM64(in=in,load=load5,address=address[0..5],out=out5);
  	RAM64(in=in,load=load6,address=address[0..5],out=out6);
  	RAM64(in=in,load=load7,address=address[0..5],out=out7);
  	Mux8Way16(a=out0,b=out1,c=out2,d=out3,e=out4,f=out5,g=out6,h=out7,sel=address[6..8],out=out);
}

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];
    PARTS:
	DMux8Way(in=load,sel=address[9..11],a=load0,b=load1,c=load2,d=load3,e=load4,f=load5,g=load6,h=load7);
	RAM512(in=in,load=load0,address=address[0..8],out=out0);
	RAM512(in=in,load=load1,address=address[0..8],out=out1);
	RAM512(in=in,load=load2,address=address[0..8],out=out2);
	RAM512(in=in,load=load3,address=address[0..8],out=out3);
	RAM512(in=in,load=load4,address=address[0..8],out=out4);
	RAM512(in=in,load=load5,address=address[0..8],out=out5);
	RAM512(in=in,load=load6,address=address[0..8],out=out6);
	RAM512(in=in,load=load7,address=address[0..8],out=out7);
	Mux8Way16(a=out0,b=out1,c=out2,d=out3,e=out4,f=out5,g=out6,h=out7,sel=address[9..11],out=out);
}

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];
    PARTS:
    	DMux4Way(in=load,sel=address[12..13],a=load0,b=load1,c=load2,d=load3);
	RAM4K(in=in,load=load0,address=address[0..11],out=out0);
	RAM4K(in=in,load=load1,address=address[0..11],out=out1);
	RAM4K(in=in,load=load2,address=address[0..11],out=out2);
	RAM4K(in=in,load=load3,address=address[0..11],out=out3);
	Mux4Way16(a=out0,b=out1,c=out2,d=out3,sel=address[12..13],out=out);
}

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];
    PARTS:
  	Inc16(in=regout,out=time);
  	Mux16(a=regout,b=time,sel=inc,out=incflag);
  	Mux16(a=incflag,b=in,sel=load,out=resetflag);
  	Mux16(a=resetflag,b=false,sel=reset,out=loadflag);
  	Register(in=loadflag,load=true,out=out,out=regout);
}

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];
    PARTS:
	DMux(in=load,sel=address[14], a=loadRAM, b=IOAndothermem);
	DMux(in=IOAndothermem, sel=address[13], a=loadScreen, b=invalid);
	RAM16K(in=in, load=loadRAM, address=address[0..13], out=ramout);
	Screen(in=in, load=loadScreen, address=address[0..12], out=screenout);
	Keyboard(out=kbdout);
	Mux4Way16(a=ramout, b=ramout, c=screenout, d=kbdout, sel=address[13..14],out=out);
}

CHIP CPU {
    IN  inM[16], instruction[16], reset;   
    OUT outM[16], writeM, addressM[15], pc[15];         
    PARTS:
	Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=inA);
	Not(in=instruction[15], out=notc);
	Or(a=notc, b=instruction[5], out=writeA);
	ARegister(in=inA, load=writeA, out=outA, out[0..14]=addressM);
	And(a=instruction[15], b=instruction[4], out=writeD);
	DRegister(in=inD, load=writeD, out=outD);
	And(a=instruction[15], b=instruction[3], out=writeM);
	Mux16(a=outA, b=inM, sel=instruction[12], out=outAM);
	And(a=instruction[2],b=ng,out=jumpcond1);
	And(a=instruction[1],b=zr,out=jumpcond2);
	Or(a=zr, b=ng, out=zrOrng);
	Not(in=zrOrng, out=notzrAndNotng);
	And(a=notzrAndNotng, b=instruction[0], out=jumpcond3);
	Or(a=jumpcond1,b=jumpcond2,out=jumpcond1Or2);
	Or(a=jumpcond1Or2,b=jumpcond3,out=jump);
	And(a=instruction[15],b=jump,out=loadjump);
	PC(in=outA, load=loadjump, inc=true, reset=reset, out[0..14]=pc);
	ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
	    ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=inD, out=ALUoutput, zr=zr, ng=ng);	
}

CHIP Computer {
    IN reset;
    PARTS:
	CPU(inM=inM ,instruction=instruction ,reset=reset ,outM=outM, writeM=writeM ,addressM=addressM ,pc=pc);
	ROM32K(address=pc ,out=instruction);
	Memory(in=outM ,load=writeM ,address=addressM,out=inM );
}
