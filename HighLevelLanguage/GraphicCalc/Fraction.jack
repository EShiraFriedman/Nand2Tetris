// This class was evolved from a file that is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Fraction/Fraction.jack

// Extended and Modified by Shira Joseph

/**
* Represents the Fraction type and related operations.
*/
class Fraction {
  field int numerator, denominator;
  field boolean pos;
  static Int calc1, calc2, calc3, calc4, calc5, calc6, calc7;

  /** Constructs a (reduced) fraction from the given numerator and denominator. */
  constructor Fraction new(Int x, Int y) {
    do set(x, y);
    return this;
  }

	/** Initiates static variables */
	function void init(){
		let calc1 = Int.new(true, 1);
		let calc2 = Int.new(true, 1);
		let calc3 = Int.new(true, 1);
		let calc4 = Int.new(true, 1);
		let calc5 = Int.new(true, 1);
		let calc6 = Int.new(true, 1);
		let calc7 = Int.new(true, 1);
		return;
	}

	/** Disposes static variables */
  function void deInit() {
    do calc1.dispose();
    do calc2.dispose();
    do calc3.dispose();
    do calc4.dispose();
    do calc5.dispose();
    do calc6.dispose();
    do calc7.dispose();
    return;
  }

  /** Reduces this fraction. */
  method void reduce() {
    var int g;
    let g = Fraction.gcd(numerator, denominator);
    if (g > 1) {
       let numerator = numerator / g;
       let denominator = denominator / g;
    }
    return;
  }

  /** Accessors. */
  method int numerator(){ return numerator; }
  method int denominator(){ return denominator; }
  method boolean pos(){ return pos; }

  method void set(Int n, Int d){
    let numerator = n.num();
    let denominator = d.num();

    if (n.pos() = d.pos()){
      let pos = true;
    } else {
      let pos = false;
    }
    if (d.num() = 0) {
      do Sys.error(3);
    }
    if (n.num() = 0) {
      let denominator = 1;
      let pos = true;
    } else {
      do reduce();
    }
    return;
	}
  method void setPos(boolean value){
    let pos = value;
    return;
  }

  /** Adds this fraction and another */
  method Fraction plus(Fraction other) {
		do calc1.set(pos, numerator);
		do calc2.set(true, other.denominator());
    do Int.multiply(calc1, calc2, calc3);
    do calc4.set(other.pos(), other.numerator());
		do calc5.set(true, denominator);
		do Int.multiply(calc4, calc5, calc6);
		do calc7.set(true, denominator * other.denominator());
    return Fraction.new(calc3.plus(calc6), calc7);
  }

  /** Subtracts this fraction from another */
  method Fraction minus(Fraction other) {
    do calc1.set(pos, numerator);
    do calc2.set(true, other.denominator());
    do Int.multiply(calc1, calc2, calc3);
		do calc4.set(other.pos(), other.numerator());
		do calc5.set(true, denominator);
		do Int.multiply(calc4, calc5, calc6);
		do calc7.set(true, denominator * other.denominator());
    return Fraction.new(calc3.minus(calc6), calc7);
  }

  /** Multiplies two fractions */
  function void multiply(Fraction frac1, Fraction frac2, Fraction result, Int mcalc1, Int mcalc2, Int mcalc3, Int mcalc4, Int mcalc5, Int mcalc6) {
		do mcalc1.set(frac1.pos(), frac1.numerator());
    do mcalc2.set(true, frac1.denominator());
		do mcalc3.set(frac2.pos(), frac2.numerator());
		do Int.multiply(mcalc1, mcalc3, mcalc4);
		do mcalc5.set(true, frac2.denominator());
		do Int.multiply(mcalc2, mcalc5, mcalc6);
		do result.set(mcalc4, mcalc6);
		return;
  }

  /** Divides one fraction by another */
  method Fraction dividedBy (Fraction divisor) {
    var Int a, b;
    let a = Int.new(true, divisor.denominator());
		let b = Int.new(divisor.pos(), divisor.numerator());
    return Fraction.new(a.times(Int.new(pos, numerator)), b.times(Int.new(true, denominator)));
  }

	/** Turns a string into a Fraction. Accepts these formats: x, -x, x/y, x\y, -x/y, -x\y, x/-y, x\-y, -x/-y, -x\-y */
  function Fraction toFraction (String num) {
    var int delimiter, forwardSlash, backSlash, n, d, start, end, negative, negative2;
    var Int nInt, dInt;
    var String nS, dS, num2, num3;
    var char fChar, bChar, negChar;
    var Fraction frac;
    var boolean numerPos, denomPos;

    let numerPos = true;
    let denomPos = true;
		let negChar = 45;
    let fChar = 47;
    let bChar = 92;

    let negative = S.indexOf(num, negChar);
    if (negative = 0) {
      let numerPos = false;
      let num2 = num;
      let num = S.substr(num2, 1, num2.length());
    }
    let forwardSlash = S.indexOf(num, fChar);
    let num3 = num;
    let backSlash = S.indexOf(num3, bChar);
    if (forwardSlash = -1 & backSlash = -1) {
      let n = num.intValue();
      let nInt = Int.new(numerPos, n);
      let dInt = Int.new(true, 1);
      let frac = Fraction.new(nInt, dInt);
      return frac;
    }
    if (forwardSlash > -1) {
      let delimiter = forwardSlash;
    } else {
      let delimiter = backSlash;
    }
    let nS = S.substr(num, 0, delimiter);
		let start = delimiter + 1;
		let end = String.length(num);
    let dS = S.substr(num, start, end);
    let negative2 = S.indexOf(dS, negChar);
    if (negative2 = 0) {
      let denomPos = false;
      let dS = S.substr(dS, 1, dS.length());
    }
		let n = nS.intValue();
		let d = dS.intValue();
		let frac = Fraction.new(Int.new(numerPos, n), Int.new(denomPos, d));
    return frac;
  }

	method String toString(){
		var String appended, n, d, sign;
		if (pos) {
		  let sign = "";
		} else {
		  let sign = "-";
		}
		let n = String.new(6);
		let d = String.new(6);

		do n.setInt(numerator);
		do d.setInt(denominator);
		if (denominator = 1){
			if (~(numerator = 1)) {
			  let appended = S.append(sign, n);
			} else {
				let appended = S.append(sign, "1");
			}
		} else {
			let appended = S.append4(sign, n, "/", d);
		}
		return appended;
	}

	method int toInt() {
		var int a;
		if (numerator = 0){
			return 0;
		}
		let a = numerator/denominator;
		return a;
	}

	method void checkValid() {
		if(denominator > 9999 | denominator < -9999 | numerator > 9999 | numerator < -9999 | denominator = 0){
			do Out.ln("Invalid fraction");
		}
		return;
	}

//	method boolean equals(Fraction f2) {
//		if (numerator = f2.numerator() & denominator = f2.denominator() & pos = f2.pos()){
//			return true;
//		}
//		return false;
//	}
	method boolean isGreaterThan(Fraction f2) {
		if (pos = f2.pos()){
			if (numerator = f2.numerator() & denominator = f2.denominator()){
				return false;
			}
			if (numerator * f2.denominator() < f2.numerator() * denominator){
				return false;
			}
			return true;
		}
		return pos;
	}

	method boolean isLessThan(Fraction f2) {
		if (pos = f2.pos()){
			if (numerator = f2.numerator() & denominator = f2.denominator()){
				return false;
			}
			if (numerator * f2.denominator() > f2.numerator() * denominator){
				return false;
			}
			return true;
		}
		return ~pos;
	}


  /** Disposes this fraction. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  // Computes the greatest common divisor of the given integers.
  function int gcd(int a, int b) {
    var int r;
    while (~(b = 0)) {             // applies Euclid's algorithm
       let r = a - (b * (a / b));  // r = remainder of the integer division a/b
       let a = b; let b = r;
    }
    return a;
  }
}
