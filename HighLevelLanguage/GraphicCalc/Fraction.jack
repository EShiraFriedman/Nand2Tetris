// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Fraction/Fraction.jack

/** Represents the Fraction type and related operations. */
class Fraction {
  field int numerator, denominator;  // field = property = member variable.

  /** Constructs a (reduced) fraction from the given numerator and denominator. */
  constructor Fraction new(int x, int y) {
    let numerator = x;
    let denominator = y;
    do reduce();   // reduces the fraction
    return this;   // a constructor is expected to return a reference to the new object
  }

  // Reduces this fraction.
  method void reduce() {
    var int g;
    let g = Fraction.gcd(numerator, denominator);
//    do Out.lnI(g);
    if (g > 1) {
       let numerator = numerator / g;
       let denominator = denominator / g;
    }
    return;
  }

  /** Accessors. */
  method int getNumerator() { return numerator; }
  method int getDenominator() { return denominator; }

  /** Returns the sum of this fraction and the other one. */
  method Fraction plus(Fraction other) {
    var int sum;
    let sum = (numerator * other.getDenominator()) + (other.getNumerator() * denominator);
    return Fraction.new(sum, denominator * other.getDenominator());
  }

  // More fraction-related methods (minus, times, div, etc.) can be added here.

 /** Disposes this fraction. */
  method void dispose() {
    do Memory.deAlloc(this);  // uses an OS routine to recycle the memory held by the object
    return;
  }

  /** Prints this fraction in the format x/y. */
  method void print() {
    do Output.printInt(numerator);
    do Output.printString("/");
    do Output.printInt(denominator);
    return;
  }

  // Computes the greatest common divisor of the given integers.
  function int gcd(int a, int b) {
    var int r;
    while (~(b = 0)) {             // applies Euclid's algorithm
       let r = a - (b * (a / b));  // r = remainder of the integer division a/b
       let a = b; let b = r;
    }
    return a;
  }

	/**************************************************************/
	/** The following methods written by Shira Joseph, Dec 2018  **/
	/**----------------------------------------------------------**/

  /** Subtracts one fraction from another */
  method Fraction minus(Fraction sub) {
    var int minuend, subtrahend, difference;
    let minuend = numerator * sub.getDenominator();
    let subtrahend = sub.getNumerator() * denominator;
    let difference = minuend - subtrahend;
    return Fraction.new(difference, denominator * sub.getDenominator());
  }

  /** Multiplies two fractions */
  method Fraction times(Fraction mult) {
    var int numer, denom;
    let numer = numerator * mult.getNumerator();
    let denom = denominator * mult.getDenominator();
    return Fraction.new(numer, denom);
  }

  /** Divides one fraction by another */
  method Fraction dividedBy (Fraction divisor) {
    var int numer, denom, quotient;
    let numer = numerator * divisor.getDenominator();
    let denom = denominator * divisor.getNumerator();
    return Fraction.new(numer, denom);
  }

	/** Turns a string into a Fraction */
  function Fraction toFraction (String num) {
    var int delimiter, forwardSlash, backSlash, end, len, dInd, numerI, denomI;
    var String numer, denom;
//		do Out.ln(S.append("toFraction thinks it is: ", num));
    let forwardSlash = S.indexOf(num, 47);
    let backSlash = S.indexOf(num, 92);

    if (forwardSlash = -1 & backSlash = -1) {
      return Fraction.new(String.intValue(num), 1);
    }

    if (forwardSlash > -1) {
//      do Out.ln("Found a forward.");
      let delimiter = forwardSlash;
    } else {
//      do Out.ln("Found a back.");
      let delimiter = backSlash;
    }

//		do Out.s("Found a slash at index ");
//		do Out.lnI(delimiter);

    let numer = S.substr(num, 0, delimiter);
		let numerI = String.intValue(numer);
//    do Out.ln(S.append("numer = ", numer));
		let dInd = delimiter + 1;
		let len = num.length() - 1;
    let denom = S.substr(num, dInd, len);
		let denomI = String.intValue(denom);
//    do Out.ln(S.append("denom = ", denom));


    return Fraction.new(numerI, denomI);
  }

	method String toString(){
		var String appended, n, d;
//		let n = String.new(10);
//		let d = String.new(10);
//		do n.setInt(numerator);
//		do d.setInt(denominator);
		let n = numerator;
		let d = denominator;
		if (denominator = 1){
			let appended = n;
		} else {
			let appended = S.append3(n, "/", d);
		}
		do Out.log("toString, appended = ", appended);
		do n.dispose();
		do d.dispose();
		return appended;
	}

}
