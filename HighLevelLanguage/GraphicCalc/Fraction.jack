// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Fraction/Fraction.jack

// Extended and Modified by Shira Joseph

/** Represents the Fraction type and related operations. */
class Fraction {
  field int numerator, denominator;
  field boolean pos;

  /** Constructs a (reduced) fraction from the given numerator and denominator. */
  constructor Fraction new(Int x, Int y) {
    let numerator = x.num();
    let denominator = y.num();
    if (x.pos() = y.pos()){
      let pos = true;
    } else {
      let pos = false;
    }
    if (y.num() = 0) {
      do Sys.error(3);
    }
    do reduce();
    return this;
  }

  // Reduces this fraction.
  method void reduce() {
    var int g;
    let g = Fraction.gcd(numerator, denominator);
    if (g > 1) {
       let numerator = numerator / g;
       let denominator = denominator / g;
    }
    return;
  }

  /** Accessors. */
  method int numerator(){ return numerator; }
  method int denominator(){ return denominator; }
  method boolean pos(){ return pos; }
  method void setPos(boolean value){
    let pos = value;
    return;
  }

  /** Returns the sum of this fraction and the other one. */
  method Fraction plus(Fraction other) {
    var Int sum, numers, denoms, a, b, c;
    let a = Int.new(pos, numerator);
    let b = Int.new(true, other.denominator());
    let numers = a.times(b);
    let c = Int.new(other.pos(), other.numerator());
    let denoms = c.times(Int.new(true, denominator));
    let sum = Int.add(numers, denoms);
    return Fraction.new(sum, Int.new(true, denominator * other.denominator()));
  }

  /** Subtracts one fraction from another */
  method Fraction minus(Fraction other) {
    var Int numers, denoms, difference, a, b, c;
    let a = Int.new(pos, numerator);
    let b = Int.new(true, other.denominator());
    let numers = a.times(b);
		let c = Int.new(other.pos(), other.numerator());
		let denoms = c.times(Int.new(true, denominator));
    let difference = Int.subtract(numers, denoms);
    return Fraction.new(difference, Int.new(true, denominator * other.denominator()));
  }

  /** Multiplies two fractions */
  method Fraction times(Fraction mult) {
    var Int numer, denom, a, b;
    let a = Int.new(mult.pos(), mult.numerator());
    let numer = a.times(Int.new(pos, numerator));
    let b = Int.new(mult.pos(), mult.denominator());
    let denom = b.times(Int.new(pos, denominator));
    return Fraction.new(numer, denom);
  }

  /** Divides one fraction by another */
  method Fraction dividedBy (Fraction divisor) {
    var Int numer, denom, a, b;
    let a = Int.new(divisor.pos(), divisor.denominator());
    let numer = a.times(Int.new(pos, numerator));
		let b = Int.new(divisor.pos(), divisor.numerator());
		let denom = b.times(Int.new(pos, denominator));
    return Fraction.new(numer, denom);
  }

	/** Turns a string into a Fraction. Accepts these formats: x, -x, x/y, x\y, -x/y, -x\y, x/-y, x\-y, -x/-y, -x\-y */
  function Fraction toFraction (String num) {
    var int delimiter, forwardSlash, backSlash, n, d, start, end, negative, negative2;
    var Int nInt, dInt;
    var String nS, dS, num2, num3;
    var char fChar, bChar, negChar;
    var Fraction frac;
    var boolean numerPos, denomPos;

    let numerPos = true;
    let denomPos = true;
		let negChar = 45;
    let fChar = 47;
    let bChar = 92;

    let negative = S.indexOf(num, negChar);
    if (negative = 0) {
      let numerPos = false;
      let num2 = num;
      let num = S.substr(num2, 1, num2.length());
    }
    let forwardSlash = S.indexOf(num, fChar);
    let num3 = num;
    let backSlash = S.indexOf(num3, bChar);
    if (forwardSlash = -1 & backSlash = -1) {
      let n = num.intValue();
      let nInt = Int.new(numerPos, n);
      let dInt = Int.new(true, 1);
      let frac = Fraction.new(nInt, dInt);
      return frac;
    }
    if (forwardSlash > -1) {
      let delimiter = forwardSlash;
    } else {
      let delimiter = backSlash;
    }
    let nS = S.substr(num, 0, delimiter);
		let start = delimiter + 1;
		let end = String.length(num);
    let dS = S.substr(num, start, end);
    let negative2 = S.indexOf(dS, negChar);
    if (negative2 = 0) {
      let denomPos = false;
      let dS = S.substr(dS, 1, dS.length());
    }
		let n = nS.intValue();
		let d = dS.intValue();
		let frac = Fraction.new(Int.new(numerPos, n), Int.new(denomPos, d));
    return frac;
  }

	method String toString(){
		var String appended, n, d, sign;
		if (pos) {
		  let sign = "";
		} else {
		  let sign = "-";
		}
		let n = String.new(20);
		let d = String.new(20);
		do n.setInt(numerator);
		do d.setInt(denominator);
		if (denominator = 1){
			if (~(numerator = 1)) {
			  let appended = S.append(sign, n);
			} else {
				let appended = S.append(sign, "1");
			}
		} else {
			let appended = S.append4(sign, n, "/", d);
		}
		return appended;
	}

	method int toInt() {
		var int a;
		let a = numerator/denominator;
		return a;
	}

	method void checkValid() {
		if(denominator > 9999 | denominator < -9999 | numerator > 9999 | numerator < -9999){
			do Out.ln("Invalid fraction");
//			do Sys.halt();
		}
		return;
	}

	method boolean isGreaterThan(Fraction f2) {
		if (numerator * f2.denominator() > f2.numerator() * denominator){
			return true;
		}
		return false;
	}


  /** Disposes this fraction. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  // Computes the greatest common divisor of the given integers.
  function int gcd(int a, int b) {
    var int r;
    while (~(b = 0)) {             // applies Euclid's algorithm
       let r = a - (b * (a / b));  // r = remainder of the integer division a/b
       let a = b; let b = r;
    }
    return a;
  }
}
