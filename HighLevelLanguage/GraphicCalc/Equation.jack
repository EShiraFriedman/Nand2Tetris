class Equation {
  field int x, y, m, b;
  field int degree;
  field boolean xExists, yExists, bExists, mExists;
  field String format;
  field Fraction xF, yF, bF, mF;
	field Point lowestPoint, highestPoint;

	/** Constructs a new equation for graphing */
  constructor Equation new(int deg, String form) {
    let xExists = false;
    let yExists = false;
    let bExists = false;
    let mExists = false;
    let degree = deg;
    let format = form;
    let lowestPoint = Point.new(0,0);
    let highestPoint = Point.new(0, 0);
    return this;
  }

  /** Accessors. */
  method Fraction getX() { return xF; }
  method Fraction getY() { return yF; }
  method Fraction getSlope() { return mF; }
  method Point getHighestPoint() { return highestPoint; }
  method Point getLowestPoint() { return lowestPoint; }
  method void setX(Fraction xSet) {
    let xF = xSet;
    let xExists = true;
    return;
  }
  method void setY(Fraction ySet) {
    let yF = ySet;
    let yExists = true;
    return;
  }
  method void setB(Fraction bSet) {
    let bF = bSet;
    let bExists = true;
    return;
  }
  method void setSlope(Fraction mSet) {
    let mF = mSet;
    let mExists = true;
    return;
  }
  method void setHighestPoint(Point highSet) {
    let highestPoint = highSet;
    return;
  }
  method void setLowestPoint(Point lowSet) {
    let lowestPoint = lowSet;
    return;
  }

	/** Uses the value of x to solve for y */
	method Fraction solveForY(Fraction xPoint) {
		var Fraction tempCalc1, tempCalc2, tempCalc3;
		if (S.equals(format, "I")){
			let tempCalc1 = mF.times(xPoint);
			let tempCalc2 = tempCalc1.plus(bF);
			return tempCalc2;
		}
		if (S.equals(format, "P")){
			let tempCalc1 = xF.minus(xPoint);
			let tempCalc2 = mF.times(tempCalc1);
			let tempCalc3 = yF.minus(tempCalc2);
			return tempCalc3;
    }
    if (S.equals(format, "O")){
      let tempCalc1 = xF.times(xPoint);
      let tempCalc2 = bF.minus(tempCalc1);
      let tempCalc3 = tempCalc2.dividedBy(yF);
      return tempCalc3;
    }
    return Fraction.new(0,1);
	}

	/** Uses the value of y to solve for x */
	method Fraction solveForX(Fraction yPoint) {
		var Fraction tempCalc1, tempCalc2, tempCalc3;
		if (S.equals(format, "I")){
			let tempCalc1 = yPoint.minus(bF);
			let tempCalc2 = tempCalc1.dividedBy(mF);
			return tempCalc2;
		}
		if (S.equals(format, "P")){
			let tempCalc1 = yF.minus(yPoint);
			let tempCalc2 = tempCalc1.dividedBy(mF);
			let tempCalc3 = xF.minus(tempCalc2);
			return tempCalc3;
		}
		if (S.equals(format, "O")){
			let tempCalc1 = yF.times(yPoint);
			let tempCalc2 = bF.minus(tempCalc1);
			let tempCalc3 = tempCalc2.dividedBy(xF);
			return tempCalc3;
		}
		return Fraction.new(0,1);
	}


	/****************************************************
	**  Methods to build the equation with user input  **
	****************************************************/

	// TODO: either prevent or figure out how to handle an input of 0
	/** Stores the appropriate values from the user based on the chosen equation format */
	method void getValues(){
		if (S.equals(format, "P")){
      do inputVar("y");
      do inputVar("m");
      do inputVar("x");
      return;
    }
		if (S.equals(format, "I")){
			do inputVar("m");
			do inputVar("b");
			return;
		}
		if (S.equals(format, "O")){
      do inputVar("x");
      do inputVar("y");
      do inputVar("b");
      return;
		}
    return;
	}

	/** Retrieves a single value from the user */
  method void inputVar(String v) {
    var String xString, yString, bString, mString;
    if (S.equals(v, "x")){
      let xString = Keyboard.readLine("Enter an x:");
      let xF = Fraction.toFraction(xString);
      let xExists = true;
    } else {
	    if (S.equals(v, "y")){
	      let yString = Keyboard.readLine("Enter a y:");
	      let yF = Fraction.toFraction(yString);
	      let yExists = true;
	    } else {
		    if (S.equals(v, "b")){
		      let bString = Keyboard.readLine("Enter an intercept:");
		      let bF = Fraction.toFraction(bString);
		      let bExists = true;
		    } else {
			    if (S.equals(v, "m")){
			      let mString = Keyboard.readLine("Enter a slope:");
			      let mF = Fraction.toFraction(mString);
			      let mExists = true;
			    }
			  }
			}
		}
    return;
  }


	/************************************************************************************
	**  Methods to create a string version of the equation for printing to the screen  **
	************************************************************************************/

	/** Returns the current state of the equation as a string based on the chosen equation format */
  method String toString() {
    if (degree = 1){
	    if (S.equals(format, "O")){
	      return getOldString();
	    }
	    if (S.equals(format, "I")){
	      return getSlopeInterceptString();
	    }
	    if (S.equals(format, "P")){
	      return getPointSlopeString();
	    }
    }
    return "x";
  }

  /** Returns a string version of the equation in slope-intercept form: y = mx + b */

  method String getSlopeInterceptString(){
    var String mS, bS, stringified;
    if (mExists){
      let mS = mF.toString();
    } else {
      let mS = "_";
    }
    if (bExists){
      let bS = bF.toString();
    } else {
      let bS = "_";
    }

    let stringified = S.append4("y = ", mS, "x + ", bS);
    return stringified;
  }

  /** Returns a string version of the equation in point-slope form: (y - y1) = m(x - x1) */
  method String getPointSlopeString(){
    var String xS, yS, mS, stringified;

    if (yExists){
      let yS = yF.toString();
    } else {
      let yS = "_";
    }
    if (mExists){
			let mS = mF.toString();
    } else {
      let mS = "_";
    }
    if (xExists){
			let xS = xF.toString();
    } else {
      let xS = "_";
    }

		let stringified = S.append7("(y - ", yS, ") = ", mS, "(x - ", xS, ")");
    return stringified;
  }

	/** Returns a string version of the equation in the old format: cy + dx = b */
  method String getOldString(){
    var String xS, yS, bS, stringified;
    var Array eArray;

    if (xExists){
      let xS = xF.toString();
    } else {
      let xS = "_";
    }
    if (yExists){
      let yS = yF.toString();
    } else {
      let yS = "_";
    }
    if (bExists){
      let bS = bF.toString();
    } else {
      let bS = "_";
    }

    let stringified = S.append5(xS, "x + ", yS, "y = ", bS);
    return stringified;
  }

  method Fraction getYIntercept() {
    var Fraction yIntercept, x;
    let x = Fraction.new(0,1);
    let yIntercept = solveForY(x);
    return yIntercept;
  }

  method Fraction getXIntercept() {
      var Fraction xIntercept, y;
      let y = Fraction.new(0,1);
      let xIntercept = solveForX(y);
      return xIntercept;
  }
}
