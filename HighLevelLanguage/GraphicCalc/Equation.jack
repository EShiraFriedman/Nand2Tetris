class Equation {
/** Constructs a new equation for graphing */
  field int x, y, b, degree;
  field boolean xExists, yExists, bExists, mExists;
  field String format, stringified;

  constructor Equation new(int deg, String form) {
    let xExists = false;
    let yExists = false;
    let bExists = false;
    let mExists = false;
    let degree = deg;
    let format = form;
    return this;
  }

//  method int solveForX(int y) {
//    var Fraction x;
//  }

//  method int solveForY(int x) {
//
//  }

//  method void plot() {
//
//  }
  method String getStringified(){
    return stringified;
  }
  method void setStringified(int type) {
    var String eq;
    do Out.s("type: ");
    do Out.lnI(type);
//    if (type = 2){
      do setOldString();
//    }
    do Out.ln(stringified);
    return;
  }



  method void setOldString(){
    var String xS, yS, bS;
    var Array eArray;

    if (xExists){
      let xS = String.new(10);
      do xS.setInt(x);
    } else {
      let xS = "_";
    }
    if (yExists){
      let yS = String.new(10);
      do yS.setInt(y);
    } else {
      let yS = "_";
    }
    if (bExists){
      let bS = String.new(10);
      do bS.setInt(b);
    } else {
      let bS = "_";
    }

    let eArray = Array.new(5);
    let eArray[0] = xS;
    let eArray[1] = "x + ";
    let eArray[2] = yS;
    let eArray[3] = "y = ";
    let eArray[4] = bS;

    let stringified = StringsUtil.concat(5, eArray);

    do xS.dispose();
    do yS.dispose();
    do bS.dispose();
    return;
  }

  method void inputVar(int v) {
    if (v = 0){
      let x = Keyboard.readInt("Enter an x:");
      let xExists = true;
      do Out.lnI(x);
    }
    if (v = 1){
      let y = Keyboard.readInt("Enter a y:");
      let yExists = true;
      do Out.lnI(y);
    }
    if (v = 2){
      let b = Keyboard.readInt("Enter a b:");
      let bExists = true;
      do Out.lnI(b);
    }
    return;
  }
}
