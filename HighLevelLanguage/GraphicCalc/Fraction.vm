function Fraction.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push pointer 0
push argument 0
push argument 1
call Fraction.set 3
pop temp 0
push pointer 0
return
function Fraction.reduce 1
push argument 0
pop pointer 0
push this 0
push this 1
call Fraction.gcd 2
pop local 0
push local 0
push constant 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push local 0
call Math.divide 2
pop this 0
push this 1
push local 0
call Math.divide 2
pop this 1
label IF_FALSE0
push constant 0
return
function Fraction.numerator 0
push argument 0
pop pointer 0
push this 0
return
function Fraction.denominator 0
push argument 0
pop pointer 0
push this 1
return
function Fraction.pos 0
push argument 0
pop pointer 0
push this 2
return
function Fraction.setPos 0
push argument 0
pop pointer 0
push argument 1
pop this 2
push constant 0
return
function Fraction.set 0
push argument 0
pop pointer 0
push argument 1
call Int.num 1
pop this 0
push argument 2
call Int.num 1
pop this 1
push argument 1
call Int.pos 1
push argument 2
call Int.pos 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
pop this 2
goto IF_END0
label IF_FALSE0
push constant 0
pop this 2
label IF_END0
push argument 2
call Int.num 1
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 3
call Sys.error 1
pop temp 0
label IF_FALSE1
push argument 1
call Int.num 1
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
pop this 1
push constant 0
not
pop this 2
goto IF_END2
label IF_FALSE2
push pointer 0
call Fraction.reduce 1
pop temp 0
label IF_END2
push constant 0
return
function Fraction.plus 2
push argument 0
pop pointer 0
push this 2
push this 0
call Int.new 2
pop local 0
push local 0
push constant 0
not
push argument 1
call Fraction.denominator 1
call Int.new 2
call Int.times 2
pop static 0
push argument 1
call Fraction.pos 1
push argument 1
call Fraction.numerator 1
call Int.new 2
pop local 1
push local 1
push constant 0
not
push this 1
call Int.new 2
call Int.times 2
pop static 1
push static 0
push static 1
call Int.plus 2
push constant 0
not
push this 1
push argument 1
call Fraction.denominator 1
call Math.multiply 2
call Int.new 2
call Fraction.new 2
return
function Fraction.minus 2
push argument 0
pop pointer 0
push this 2
push this 0
call Int.new 2
pop local 0
push local 0
push constant 0
not
push argument 1
call Fraction.denominator 1
call Int.new 2
call Int.times 2
pop static 0
push argument 1
call Fraction.pos 1
push argument 1
call Fraction.numerator 1
call Int.new 2
pop local 1
push local 1
push constant 0
not
push this 1
call Int.new 2
call Int.times 2
pop static 1
push static 0
push static 1
call Int.minus 2
push constant 0
not
push this 1
push argument 1
call Fraction.denominator 1
call Math.multiply 2
call Int.new 2
call Fraction.new 2
return
function Fraction.times 2
push argument 0
pop pointer 0
push argument 1
call Fraction.pos 1
push argument 1
call Fraction.numerator 1
call Int.new 2
pop local 0
push constant 0
not
push argument 1
call Fraction.denominator 1
call Int.new 2
pop local 1
push local 0
push this 2
push this 0
call Int.new 2
call Int.times 2
push local 1
push constant 0
not
push this 1
call Int.new 2
call Int.times 2
call Fraction.new 2
return
function Fraction.dividedBy 2
push argument 0
pop pointer 0
push constant 0
not
push argument 1
call Fraction.denominator 1
call Int.new 2
pop local 0
push argument 1
call Fraction.pos 1
push argument 1
call Fraction.numerator 1
call Int.new 2
pop local 1
push local 0
push this 2
push this 0
call Int.new 2
call Int.times 2
push local 1
push constant 0
not
push this 1
call Int.new 2
call Int.times 2
call Fraction.new 2
return
function Fraction.toFraction 21
push constant 0
not
pop local 19
push constant 0
not
pop local 20
push constant 45
pop local 17
push constant 47
pop local 15
push constant 92
pop local 16
push argument 0
push local 17
call S.indexOf 2
pop local 7
push local 7
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 19
push argument 0
pop local 13
push local 13
push constant 1
push local 13
call String.length 1
call S.substr 3
pop argument 0
label IF_FALSE0
push argument 0
push local 15
call S.indexOf 2
pop local 1
push argument 0
pop local 14
push local 14
push local 16
call S.indexOf 2
pop local 2
push local 1
push constant 1
neg
eq
push local 2
and
push constant 1
neg
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
call String.intValue 1
pop local 3
push local 19
push local 3
call Int.new 2
pop local 9
push constant 0
not
push constant 1
call Int.new 2
pop local 10
push local 9
push local 10
call Fraction.new 2
pop local 18
push local 18
return
label IF_FALSE1
push local 1
push constant 1
neg
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 1
pop local 0
goto IF_END2
label IF_FALSE2
push local 2
pop local 0
label IF_END2
push argument 0
push constant 0
push local 0
call S.substr 3
pop local 11
push local 0
push constant 1
add
pop local 5
push argument 0
call String.length 1
pop local 6
push argument 0
push local 5
push local 6
call S.substr 3
pop local 12
push local 12
push local 17
call S.indexOf 2
pop local 8
push local 8
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
pop local 20
push local 12
push constant 1
push local 12
call String.length 1
call S.substr 3
pop local 12
label IF_FALSE3
push local 11
call String.intValue 1
pop local 3
push local 12
call String.intValue 1
pop local 4
push local 19
push local 3
call Int.new 2
push local 20
push local 4
call Int.new 2
call Fraction.new 2
pop local 18
push local 18
return
function Fraction.toString 4
push argument 0
pop pointer 0
push this 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call String.new 1
pop local 3
goto IF_END0
label IF_FALSE0
push constant 1
call String.new 1
push constant 45
call String.appendChar 2
pop local 3
label IF_END0
push constant 6
call String.new 1
pop local 1
push constant 6
call String.new 1
pop local 2
push local 1
push this 0
call String.setInt 2
pop temp 0
push local 2
push this 1
call String.setInt 2
pop temp 0
push this 1
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 0
push constant 1
eq
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 3
push local 1
call S.append 2
pop local 0
goto IF_END2
label IF_FALSE2
push local 3
push constant 1
call String.new 1
push constant 49
call String.appendChar 2
call S.append 2
pop local 0
label IF_END2
goto IF_END1
label IF_FALSE1
push local 3
push local 1
push constant 1
call String.new 1
push constant 47
call String.appendChar 2
push local 2
call S.append4 4
pop local 0
label IF_END1
push local 0
return
function Fraction.toInt 1
push argument 0
pop pointer 0
push this 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push this 0
push this 1
call Math.divide 2
pop local 0
push local 0
return
function Fraction.checkValid 0
push argument 0
pop pointer 0
push this 1
push constant 9999
gt
push this 1
or
push constant 9999
neg
lt
push this 0
or
push constant 9999
gt
push this 0
or
push constant 9999
neg
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 16
call String.new 1
push constant 73
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 118
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 102
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 110
call String.appendChar 2
call Out.ln 1
pop temp 0
label IF_FALSE0
push constant 0
return
function Fraction.isGreaterThan 0
push argument 0
pop pointer 0
push this 2
push argument 1
call Fraction.pos 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push argument 1
call Fraction.numerator 1
eq
push this 1
and
push argument 1
call Fraction.denominator 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push this 0
push argument 1
call Fraction.denominator 1
call Math.multiply 2
push argument 1
call Fraction.numerator 1
lt
push this 1
call Math.multiply 2
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
label IF_FALSE2
push constant 0
not
return
label IF_FALSE0
push this 2
return
function Fraction.isLessThan 0
push argument 0
pop pointer 0
push this 2
push argument 1
call Fraction.pos 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push argument 1
call Fraction.numerator 1
eq
push this 1
and
push argument 1
call Fraction.denominator 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push this 0
push argument 1
call Fraction.denominator 1
call Math.multiply 2
push argument 1
call Fraction.numerator 1
gt
push this 1
call Math.multiply 2
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
label IF_FALSE2
push constant 0
not
return
label IF_FALSE0
push this 2
not
return
function Fraction.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Fraction.gcd 1
label WHILE_EXP0
push argument 1
push constant 0
eq
not
not
if-goto WHILE_END0
push argument 0
push argument 1
push argument 0
push argument 1
call Math.divide 2
call Math.multiply 2
sub
pop local 0
push argument 1
pop argument 0
push local 0
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
