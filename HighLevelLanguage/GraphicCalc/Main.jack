/** This graphing calculator was created for the Coursera computer architecture course, Nand2Tetris (part 2),
* using Jack, a high level programming language written by Nisan and Schoken for education purposes.
* More information can be found at www.nand2tetris.org
* and in the book "The Elements of Computing Systems" by Nisan and Schocken, MIT Press.
*/

class Main {
  function void main() {
  do Screen.clearScreen();
    do Main.createEquation();
//		do Graph.drawDigit(0, 10, 10);
//		do Graph.drawDigit(1, 16, 10);
//		do Graph.drawDigit(2, 22, 10);
//		do Graph.drawDigit(3, 28, 10);
//		do Graph.drawDigit(4, 34, 10);
//		do Graph.drawDigit(5, 40, 10);
//		do Graph.drawDigit(6, 46, 10);
//		do Graph.drawDigit(7, 52, 10);
//		do Graph.drawDigit(8, 58, 10);
//		do Graph.drawDigit(9, 64, 10);
		return;
  }

  function void init() {
		do Const.init();
		do Int.init();
		do Fraction.init();
		do Point.init();
		do Equation.init();
		do Graph.init();
		return;
  }

  function void deInit() {
  	do Const.deInit();
    do Int.deInit();
    do Fraction.deInit();
    do Point.deInit();
    do Equation.deInit();
    do Graph.deInit();
    return;
  }

  function void createEquation(){
    var Equation equation;
    var String format;
    do Main.init();
    let format = Keyboard.readLine("[P]oint-Slope, Slope-[I]ntercept, or [S]tandard? ");
    while(~(S.equals(format, "S") | S.equals(format, "I") | S.equals(format, "P"))){
      if (S.equals(format, "Q")){
        return;
      }
      let format = Keyboard.readLine("Please type P, I, or S.");
    }
    let equation = Equation.new(1, format);
    do equation.getValues();
    do Out.cls();
    do Main.draw(equation);
//    do Out.cls();
//    do Main.deInit();
//    do Main.createEquation();
    return;
  }

  function void draw(Equation e){
    var Equation newE;
    var Fraction oldB, newB, scale;
    var String oldBString, newBString, sNew, sOld;

//		do Graph.drawTicks(e);
    do Out.ln(e.toString());
    let newE = Graph.getScaledLine(e);
    do Out.ln(newE.toString());
//
//    let newB = newE.getB();
//    let newBString = newB.toString();
//    do Out.s("newB = ");
//    do Out.ln(newBString);
//
//    let oldB = e.getB();
//    let oldBString = oldB.toString();
//    do Out.s("oldB = ");
//    do Out.ln(oldBString);

//    let scale = newB.dividedBy(oldB);
//		let scale = Fraction.new(Const.i1(), Const.i1());
		let scale = newE.getScale();
		do Out.ln(scale.toString());
    do Graph.drawAxes(scale);
    do Graph.drawScaledLine(newE);
    do Sys.wait(8000);
    return;
  }
}
