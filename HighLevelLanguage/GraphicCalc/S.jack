/**
* This class offers utility functions for strings
*/
class S {
	/** Takes two strings and appends them together into a single string */
  function String append (String a, String b){
    var int aLength, bLength, abLength, i;
    var String ab;
    var char c;
    let aLength = a.length();
    let bLength = b.length();
    let abLength = aLength + bLength;
    let ab = String.new(abLength);

    let i = 0;
    while (i < aLength){
      let c = a.charAt(i);
      do ab.appendChar(c);
      let i = i + 1;
    }

    let i = 0;
    while (i < bLength){
      let c = b.charAt(i);
      do ab.appendChar(c);
      let i = i + 1;
    }

    do a.dispose();
    do b.dispose();

    return ab;
  }
  // Unfortunately, Jack does not allow overriding, so these next functions are as close as you can get to it.

	function String append3 (String a, String b, String c){
		var Array strings;
		let strings = Array.new(3);
		let strings[0] = a;
		let strings[1] = b;
		let strings[2] = c;
		do strings.dispose();
		return S.concat(3, strings);
	}

	function String append4 (String a, String b, String c, String d){
    var Array strings;
    var String appended;
    let strings = Array.new(4);
    let strings[0] = a;
    let strings[1] = b;
    let strings[2] = c;
    let strings[3] = d;
    do strings.dispose();
    let appended = S.concat(4, strings);
    return appended;
  }

	function String append5 (String a, String b, String c, String d, String e){
    var Array strings;
    var String appended;
    let strings = Array.new(5);
    let strings[0] = a;
    let strings[1] = b;
    let strings[2] = c;
    let strings[3] = d;
    let strings[4] = e;
    let appended = S.concat(5, strings);
    do strings.dispose();
    return appended;
  }

  function String append6 (String a, String b, String c, String d, String e, String f){
    var Array strings;
    var String appended;
    let strings = Array.new(6);
    let strings[0] = a;
    let strings[1] = b;
    let strings[2] = c;
    let strings[3] = d;
    let strings[4] = e;
    let strings[5] = f;
    let appended = S.concat(6, strings);
    do strings.dispose();
    return appended;
  }

	function String append7 (String a, String b, String c, String d, String e, String f, String g){
    var Array strings;
    var String appended;
    do Out.ln("append7");
    do Out.s(a);
    do Out.s(",");
    do Out.s(b);
        do Out.s(",");
        do Out.s(c);
            do Out.s(",");
            do Out.s(d);
                do Out.s(",");
                do Out.s(e);
                    do Out.s(",");
                    do Out.s(f);
                        do Out.s(",");
                        do Out.ln(g);
    let strings = Array.new(7);
    let strings[0] = a;
    do Out.ln(strings[0]);
    let strings[1] = b;
    do Out.ln(strings[1]);
    let strings[2] = c;
    do Out.ln(strings[2]);
    let strings[3] = d;
    do Out.ln(strings[3]);
    let strings[4] = e;
    do Out.ln(strings[4]);
    let strings[5] = f;
    do Out.ln(strings[5]);
    let strings[6] = g;
    do Out.ln(strings[6]);


    let appended = S.concat(7, strings);
        do strings.dispose();
    do a.dispose();
    		do b.dispose();
    		do c.dispose();
    		do d.dispose();
    		do e.dispose();
    		do f.dispose();
    		do g.dispose();

    return appended;
  }

	/** Takes an array of strings and concatenates them together into a single string */
  function String concat (int end, Array strings) {
    var int i;
    var Array builder;
    var String newStr;

    let builder = Array.new(end);
    let builder[0] = strings[0];

    let i = 1;
    while (i < end) {
      let builder[i] = S.append(builder[i-1], strings[i]);
      let i = i + 1;
    }
    let newStr = builder[i - 1];
    do Out.ln(newStr);
    do strings.dispose();
    do builder.dispose();
    return newStr;
  }

	/** Returns whether two strings contain the same value */
  function boolean equals (String first, String second) {
    var int i;
    if (first.length() = second.length()){
      let i = 0;
      while (i < first.length()){
        if (~(first.charAt(i) = second.charAt(i))) {
          return false;
        }
        let i = i + 1;
      }
      return true;
    }
    return false;
  }

  /** Returns whether the given char can be found in a string */
  function boolean includes (String string, char c) {
    var int i;
    let i = 0;
    while (i < string.length()) {
      if (string.charAt(i) = c) {
        return true;
      }
      let i = i + 1;
    }
    return false;
  }

  /** Returns the index of the first time the given char appears in a string or -1 if not found */
  function int indexOf (String string, char c) {
    var int i;
    let i = 0;
    while (i < string.length()) {
      if (string.charAt(i) = c) {
        return i;
      }
      let i = i + 1;
    }
    return -1;
  }

  /** Returns a portion of the a string from the start index inclusive to the end index exclusive */
  function String substr (String fullStr, int start, int end) {
    var int i;
    var String sub;
    var char c;
    do Out.log("fullStr = ", fullStr);
    if (start > -1) {
      if (start < (end + 1)){
        if (end < fullStr.length()) {
          let sub = String.new(end - start);
					let i = start;
					while(i < end){
            let c = fullStr.charAt(i);
            do sub.appendChar(c);
            let i = i + 1;
          }
          do Out.log("subStr = ", sub);
          do fullStr.dispose();
          return sub;
        }
      }
    }
    return "";
  }
}
