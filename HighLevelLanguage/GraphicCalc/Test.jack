/** Unit tester class */
class Test {

	function void runTests(){
		do Test.testConst();
		do Test.testCoord();
		do Test.testPoint();
		do Test.testInt();
		return;
	}

	function boolean expectS(String a, String b){
		if (S.equals(a, b)){
			return true;
		}
		do Out.s("FAIL: Expected ");
		do Out.s(a);
		do Out.s(" to equal ");
		do Out.ln(b);
		return false;
	}

	function boolean expectB(boolean a, boolean b){
		if (a = b){
			return true;
		}
		do Out.s("FAIL: Expected ");
		do Out.b(a);
		do Out.s(" to equal ");
		do Out.lnB(b);
		return false;
	}

	function boolean expectI(int a, int b){
		if (a = b){
			return true;
		}
		do Out.s("FAIL: Expected ");
		do Out.i(a);
		do Out.s(" to equal ");
		do Out.lnI(b);
		return false;
	}

	function void printResults(String suiteName, Array results, int arrSize){
		var int i, countPass;
		let i = 0;
		let countPass = 0;
		while(i<arrSize){
			if(results[i]=true){
				let countPass = countPass + 1;
			}
			let i = i + 1;
		}
		do Out.s(suiteName);
		do Out.s(" suite pass rate: ");
		do Out.i(countPass);
		do Out.s("/");
		do Out.lnI(arrSize);
		return;
	}

	function void testConst(){
		var Int const0, const1, const2, const3, const4, const5, const6, const7, const8, const9;
		var Fraction const10, const11, const12, const13, const14, const15, const16;
		var String const17, const18, const19, const20, const21, const22, const23, const24;
		var Array const25, results;
		var int i, countPass;
		let results = Array.new(45);
		let const0 = Const.i0();
		let const1 = Const.i1();
		let const2 = Const.i2();
		let const3 = Const.i127();
		let const4 = Const.i128();
		let const5 = Const.i255();
		let const6 = Const.i256();
		let const7 = Const.iNeg1();
		let const8 = Const.iNeg128();
		let const9 = Const.iNeg256();
		let const10 = Const.f0();
		let const11 = Const.f1();
		let const12 = Const.f127();
		let const13 = Const.f128();
		let const14 = Const.f255();
		let const15 = Const.f256();
		let const16 = Const.fNeg1();
		let const17 = Const.sS();
		let const18 = Const.sP();
		let const19 = Const.sI();
		let const20 = Const.sQ();
		let const21 = Const.sX();
		let const22 = Const.sY();
		let const23 = Const.sM();
		let const24 = Const.sB();
		let const25 = Const.ticks();
		let results[0] = Test.expectS(const0.toString(), "0");
		let results[1] = Test.expectS(const1.toString(), "1");
		let results[2] = Test.expectS(const2.toString(), "2");
		let results[3] = Test.expectS(const3.toString(), "127");
		let results[4] = Test.expectS(const4.toString(), "128");
		let results[5] = Test.expectS(const5.toString(), "255");
		let results[6] = Test.expectS(const6.toString(), "256");
		let results[7] = Test.expectS(const7.toString(), "-1");
		let results[8] = Test.expectS(const8.toString(), "-128");
		let results[9] = Test.expectS(const9.toString(), "-256");
		let results[10] = Test.expectS(const10.toString(), "0");
		let results[11] = Test.expectS(const11.toString(), "1");
		let results[12] = Test.expectS(const12.toString(), "127");
		let results[13] = Test.expectS(const13.toString(), "128");
		let results[14] = Test.expectS(const14.toString(), "255");
		let results[15] = Test.expectS(const15.toString(), "256");
		let results[16] = Test.expectS(const16.toString(), "-1");
		let results[17] = Test.expectS(const17, "S");
		let results[18] = Test.expectS(const18, "P");
		let results[19] = Test.expectS(const19, "I");
		let results[20] = Test.expectS(const20, "Q");
		let results[21] = Test.expectS(const21, "x");
		let results[22] = Test.expectS(const22, "y");
		let results[23] = Test.expectS(const23, "m");
		let results[24] = Test.expectS(const24, "b");
		let results[25] = Test.expectI(const25[0], 31);
		let results[26] = Test.expectI(const25[1], 63);
		let results[27] = Test.expectI(const25[2], 95);
		let results[28] = Test.expectI(const25[3], 127);
		let results[29] = Test.expectI(const25[4], 159);
		let results[30] = Test.expectI(const25[5], 191);
		let results[31] = Test.expectI(const25[6], 223);
		let results[32] = Test.expectI(const25[7], 287);
		let results[33] = Test.expectI(const25[8], 319);
		let results[34] = Test.expectI(const25[9], 351);
		let results[35] = Test.expectI(const25[10], 383);
		let results[36] = Test.expectI(const25[11], 415);
		let results[37] = Test.expectI(const25[12], 447);
		let results[38] = Test.expectI(const25[13], 479);
		let results[39] = Test.expectI(const25[14], 31);
		let results[40] = Test.expectI(const25[15], 63);
		let results[41] = Test.expectI(const25[16], 95);
		let results[42] = Test.expectI(const25[17], 159);
		let results[43] = Test.expectI(const25[18], 191);
		let results[44] = Test.expectI(const25[19], 223);
		do Test.printResults("Const", results, 45);
		return;
	}

	function void testCoord() {
		var Array results;
		var Coord coord;
		let results = Array.new(10);
		let coord = Coord.new(17, 29);
		// Coord.x()
		let results[0] = Test.expectI(coord.x(), 17);
		// Coord.y()
		let results[1] = Test.expectI(coord.y(), 29);
		// Coord.setX()
		do coord.setX(15);
		let results[2] = Test.expectI(coord.x(), 15);
		// Coord.setY()
		do coord.setY(39);
		let results[3] = Test.expectI(coord.y(), 39);
		// Coord.isValidCoord()
		//    x and y are valid
		let results[4] = Test.expectB(coord.isValidCoord(), true);
		//    x < 0
		do coord.setX(-2);
		let results[5] = Test.expectB(coord.isValidCoord(), false);
		//    x >= 512
		do coord.setX(1000);
		let results[6] = Test.expectB(coord.isValidCoord(), false);
		//    y < 0
		do coord.setX(10);
		do coord.setY(-5);
		let results[7] = Test.expectB(coord.isValidCoord(), false);
		//    y >= 256
		do coord.setY(300);
		let results[8] = Test.expectB(coord.isValidCoord(), false);
		// Coord.isValidCoord()
		do coord.setY(12);
		let results[9] = Test.expectS(coord.toString(), "(10, 12)");
		do Test.printResults("Coord", results, 10);
		return;
	}

	function void testPoint(){
		var Array results;
		var Point point;
		var Int x, y;
		var Coord coord;
		let results = Array.new(10);
		let point = Point.new(Int.new(true, 31), Int.new(true, 22));
		// Point.toString()
		let results[0] = Test.expectS(point.toString(), "(31, 22)");
		// Point.x()
		let x = point.x();
		let results[1] = Test.expectS(x.toString(), "31");
		// Point.y()
		let y = point.y();
		let results[2] = Test.expectS(y.toString(), "22");
		// Point.setX()
		do point.setX(Int.new(false, 5));
		let x = point.x();
		let results[3] = Test.expectS(x.toString(), "-5");
		// Point.setY()
		do point.setY(Int.new(true, 200));
		let y = point.y();
		let results[4] = Test.expectS(y.toString(), "200");
		// Point.isValidPoint()
		//    y >= 128
		let results[5] = Test.expectB(point.isValidPoint(), false);
		//    y <= -128
		do point.setY(Int.new(false, 128));
		let results[6] = Test.expectB(point.isValidPoint(), false);
		//    x >= 256
		do point.setY(Int.new(true, 50));
		do point.setX(Int.new(true, 257));
		let results[7] = Test.expectB(point.isValidPoint(), false);
		//    x <= -256
		do point.setX(Int.new(false, 340));
		let results[8] = Test.expectB(point.isValidPoint(), false);
		//    x and y are valid
		do point.setX(Int.new(false, 255));
		let results[9] = Test.expectB(point.isValidPoint(), true);
		// Point.toCoord()
		let coord = point.toCoord();
		let results[9] = Test.expectS(coord.toString(), "(0, 177)");
		do Test.printResults("Point", results, 10);
		return;
	}

	function void testInt() {
		var Array results;
		var Int integer, product, sum, a, b;
		let results = Array.new(37);
		let integer = Int.new(true, 1);
		// Int.pos()
		let results[0] = Test.expectB(integer.pos(), true);
		// Int.num()
		let results[1] = Test.expectI(integer.num(), 1);
		// Int.toString()
		let results[2] = Test.expectS(integer.toString(), "1");
		// Int.set(-0)
		do integer.set(false, 0);
		let results[3] = Test.expectS(integer.toString(), "0");
		// Int.set()
		do integer.set(false, 25);
		let results[4] = Test.expectS(integer.toString(), "-25");
		// Int.setPos()
		do integer.setPos(true);
		let results[5] = Test.expectS(integer.toString(), "25");
		// Int.setNum()
		do integer.setNum(1000);
		let results[6] = Test.expectS(integer.toString(), "1000");
		// Int.multiply()
		let product = Const.i1();
		do Int.multiply(integer, Int.new(false, 2), product);
		let results[7] = Test.expectS(product.toString(), "-2000");
		// Int.compute()
		//    0 + 0
		let results[8] = Test.testCompute(true, 0, true, 0, true, "0");
		//    0 - 0
		let results[9] = Test.testCompute(true, 0, true, 0, false, "0");
		//    a + (-a)
		let results[10] = Test.testCompute(true, 15, false, 15, true, "0");
		//    a - a
		let results[11] = Test.testCompute(true, 15, true, 15, false, "0");
		//    a + b
		let results[12] = Test.testCompute(true, 4, true, 5, true, "9");
		//    b + a
		let results[13] = Test.testCompute(true, 5, true, 4, true, "9");
		//    a - -b
		let results[14] = Test.testCompute(true, 4, false, 5, false, "9");
		//    b - -a
		let results[15] = Test.testCompute(true, 5, false, 4, false, "9");
		//    -a + -b
		let results[16] = Test.testCompute(false, 3, false, 7, true, "-10");
		//    -b + -a
		let results[17] = Test.testCompute(false, 7, false, 3, true, "-10");
		//    -a - b
		let results[18] = Test.testCompute(false, 3, true, 7, false, "-10");
		//    -b - a
		let results[19] = Test.testCompute(false, 7, true, 3, false, "-10");
		//    -a + b
		let results[20] = Test.testCompute(false, 99, true, 246, true, "147");
		//    b + -a
		let results[21] = Test.testCompute(true, 246, false, 99, true, "147");
		//    -a - -b
		let results[22] = Test.testCompute(false, 99, false, 246, false, "147");
		//    b - a
		let results[23] = Test.testCompute(true, 246, true, 99, false, "147");
		//    a + -b
		let results[24] = Test.testCompute(true, 2, false, 16, true, "-14");
		//    -b + a
		let results[25] = Test.testCompute(false, 16, true, 2, true, "-14");
		//    -b - -a
		let results[26] = Test.testCompute(false, 16, false, 2, false, "-14");
		//    a - b
		let results[27] = Test.testCompute(true, 2, true, 16, false, "-14");
		// Int.equals()
		let results[28] = Test.expectB(integer.equals(Int.new(true, 1000)), true);
		let results[29] = Test.expectB(integer.equals(Int.new(false, 1000)), false);
		let results[30] = Test.expectB(integer.equals(Int.new(true, 3)), false);
		// Int.isLessThan()
		let results[31] = Test.expectB(integer.isLessThan(Int.new(true, 1001)), true);
		do integer.setPos(false);
		let results[32] = Test.expectB(integer.isLessThan(Int.new(false, 1001)), false);
		do integer.setPos(true);
		let results[33] = Test.expectB(integer.isLessThan(Int.new(false, 1001)), false);
		do integer.setPos(false);
		let results[34] = Test.expectB(integer.isLessThan(Int.new(true, 1001)), true);
		// Int.isGreaterThan()
		let results[35] = Test.expectB(integer.isGreaterThan(Int.new(false, 1000)), false);
		let results[37] = Test.expectB(integer.isGreaterThan(Int.new(false, 4)), false);
		let results[36] = Test.expectB(integer.isGreaterThan(Int.new(false, 1001)), true);

		do Test.printResults("Int", results, 37);
		return;
	}

	function boolean testCompute(boolean aPos, int aNum, boolean bPos, int bNum, boolean add, String expected){
		var Int a, b, sum;
		let a = Int.new(aPos, aNum);
		let b = Int.new(bPos, bNum);
		let sum = a.compute(add, b);
		return Test.expectS(sum.toString(), expected);
	}
}