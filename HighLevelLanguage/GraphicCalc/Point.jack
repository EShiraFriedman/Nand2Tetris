class Point {
	field Int x, y;
	field boolean isCoord;

	/** Constructs a point on the cartesian plane */
  constructor Point new(Int xVal, Int yVal){
    let x = xVal;
    let y = yVal;
    return this;
  }

  /** Accessors. */
  method Int x(){ return x; }
  method Int y(){ return y; }

  /**
   *  Takes an x,y point on the cartesian plane and converts it into Hack screen coordinates.
   *  The center of the screen is considered the origin.
   *  Example: the point (1, 1) would be drawn at (256, 126) on the Hack Screen
   */
  method Coord toCoord(){
    var Coord coord;
    var Int t55, o27, add, sub;
    let t55 = Int.new(true, 255);
    let o27 = Int.new(true, 127);
    let add = Int.add(t55, x);
    let sub = Int.subtract(o27, y);
    if (isValidPoint()){
      let coord = Coord.new(add.num(), sub.num());
    } else {
      do Out.s("Invalid Point ");
      do Out.s(x.toString());
      do Out.s(", ");
      do Out.ln(y.toString());
//      do Sys.wait(1000);
//      let coord = Coord.new(512, 256);
//      do Sys.halt();
    }
    return coord;
  }

  method boolean isValidPoint() {
    if (x.isLessThan(Int.new(true, 256)) & x.isGreaterThan(Int.new(false, 256)) & y.isLessThan(Int.new(true, 128)) & y.isGreaterThan(Int.new(false, 128))){
      return true;
    }
    return false;
  }

  method String toString() {
    var String xS, yS, sS;
    let xS = x.toString();
    let yS = y.toString();
    let sS = S.append5("(", xS, ", ", yS, ")");
    do Memory.deAlloc(xS);
    do Memory.deAlloc(yS);
    return sS;
//		return "dummyPoint";
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}
