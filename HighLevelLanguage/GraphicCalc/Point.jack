class Point {
	field Int x, y;
	field boolean isCoord;
	field Coord coord;

	/** Constructs a point on the cartesian plane */
  constructor Point new(Int xVal, Int yVal){
    let x = xVal;
    let y = yVal;
//    do Memory.deAlloc(xVal);
//    do Memory.deAlloc(yVal);
    return this;
  }

  /** Accessors. */
  method Int x(){ return x; }
  method Int y(){ return y; }
  method Int coord(){ return coord; }

  /**
   *  Takes an x,y point on the cartesian plane and converts it into Hack screen coordinates.
   *  The center of the screen is considered the origin.
   *  Example: the point (1, 1) would be drawn at (256, 126) on the Hack Screen
   */
  method Coord toCoord(){
    var Int add, sub, t55, o27;
    let t55 = Int.new(true, 255);
    let o27 = Int.new(true, 127);

    let add = x.plus(t55);
    let sub = y.plus(o27);
    if (isValidPoint()){
      let coord = Coord.new(add.num(), sub.num());
    } else {
      do Out.s("Invalid Point ");
      do Out.s(x.toString());
      do Out.s(", ");
      do Out.ln(y.toString());
      do Sys.wait(300);
    }
    do t55.dispose();
    do o27.dispose();
//    do Memory.deAlloc(t55);
//    do Memory.deAlloc(o27);
//    do Memory.deAlloc(add);
//    do Memory.deAlloc(sub);
    return coord;
  }

  method boolean isValidPoint() {
    var Int t56, o28, n256, n128;
    let t56 = Int.new(true, 256);
    let o28 = Int.new(true, 128);
    let n256 = Int.new(false, 256);
    let n128 = Int.new(false, 128);
    if (
      x.isLessThan(t56) &
      x.isGreaterThan(n256) &
      y.isLessThan(o28) &
      y.isGreaterThan(n128)
    ){
      do t56.dispose();
      do o28.dispose();
      do n256.dispose();
      do n128.dispose();
      return true;
    }
    do t56.dispose();
    do o28.dispose();
    do n256.dispose();
    do n128.dispose();
    return false;
  }

  method String toString() {
    var String xS, yS, sS;
    let xS = x.toString();
    let yS = y.toString();
    let sS = S.append5("(", xS, ", ", yS, ")");
//    do Memory.deAlloc(xS);
//    do Memory.deAlloc(yS);
    return sS;
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}
