/**
*	Handles points in an equation
*/
class Point {
	field int x, y;
	field boolean isCoord;
	static Coord coord;
	static int xCoord, yCoord;

	/** Constructs a point on the cartesian plane */
	constructor Point new(int xVal, int yVal){
		let x = xVal;
		let y = yVal;
		return this;
	}

	/** Initiates static variables */
	function void init() {
		let coord = Coord.new(1, 1);
		let xCoord = 1;
		let yCoord = 1;
		return;
	}

	/** Disposes static variables */
	function void deInit() {
		do coord.dispose();
		return;
	}

	/** Accessors. */
	method int x(){ return x; }
	method int y(){ return y; }
	method Coord coord(){ return coord; }
	method void setX(int val){
		let x = val;
		return;
	}
	method void setY(int val){
		let y = val;
		return;
	}

	/**
	 *  Takes an x,y point on the cartesian plane and converts it into Hack screen coordinates.
	 *  The center of the screen is considered the origin.
	 *  Example: the point (1, 1) would be drawn at (256, 126) on the Hack Screen
	 */
	method Coord toCoord(){
		if (isValidPoint()){
			let xCoord = x + 255;
			do coord.setX(xCoord);
			let yCoord = (-1 * y) + 127;
			do coord.setY(yCoord);
		} else {
			do Out.s("Invalid Point ");
			do Out.ln(toString());
			do Sys.halt();
		}
		return coord;
	}

	method boolean isValidPoint() {
		if (x < 256 & x > -256 & y < 128 & y > -128){
			return true;
		}
		return false;
	}

	method String toString() {
		var String xS, yS, sS;
		let xS = String.new(12);
		let yS = String.new(12);
		do xS.setInt(x);
		do yS.setInt(y);
		let sS = S.append5("(", xS, ", ", yS, ")");
		return sS;
	}

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}
}
