/**
* A replacement integer class to handle negative numbers
*/
class Int {
	field boolean pos;
  field int num;
  static Int solution;

  constructor Int new(boolean isPos, int x){
    let pos = isPos;
    let num = x;
    if (num = 0){
      let pos = true;
    }
    return this;
  }

	function void init(){
		let solution = Int.new(true, 1);
		return;
	}

  /** accessors */
  method boolean pos(){ return pos; }
  method int num(){ return num; }
  method void setPos(boolean val){
    let pos = val;
    return;
  }
  method void setNum(int numVal){
    let num = numVal;
    return;
  }

  method Int times(Int x){
     var int product;
     let product = x.num() * num;
     if (x.pos() = pos){
       return Int.new(true, product);
     }
     return Int.new(false, product);
  }

  method Int plus(Int x){
    var Int sum;
    let sum = compute(true, x);
    return sum;
  }

  method Int minus(Int x){
    var Int diff;
    let diff = compute(false, x);
    return diff;
  }

	/** Adds or subtracts two integers following rules of negatives */
  method Int compute(boolean add, Int b){
    var int x, y, bigger, smaller
//    , result
    ;
    var boolean biggerPos, smallerPos, posPos, posNeg, negPos, negNeg;

    let x = num;
    let y = b.num();
    let smallerPos = false;
    let posPos = false;
    let posNeg = false;
    let negPos = false;
    let negNeg = false;
//    let result = 0;
		do solution.setPos(true);
		do solution.setNum(0);

		// (0)+(0) or (0)-(0), (-1)+(1), (1)-(1)
    if (((x = 0) & (y = 0)) | ((x = y) & ((add & ~(pos = b.pos())) | (~add & (pos = b.pos()))))){
//      return Int.new(true, result);
			return solution;
    }

		// determine which (absolute) number is bigger and which is smaller as well as their signs
    if (x > y){
      let bigger = x;
      let biggerPos = pos;
      let smaller = y;
      let smallerPos = b.pos();
    } else {
      let bigger = y;
      let biggerPos = b.pos();
      let smaller = x;
      let smallerPos = pos;
    }
    if (biggerPos){ // if bigger integer is positive
      if (smallerPos){ // if smaller integer is positive
        let posPos = true;
      } else { // if smaller integer is negative
        let posNeg = true;
      }
    } else { // if bigger integer is negative
      if (smallerPos){ // if smaller integer is positive
        let negPos = true;
      } else { // if smaller integer is negative
        let negNeg = true;
      }
    }

//    let result = bigger + smaller;

		do solution.setNum(bigger + smaller);	// |2+1| = |3|
		// (1)+(2) or (2)+(1), (2)-(-1), (1)-(-2) = +3
    if((add & posPos) | (~add & ((posNeg & ~(x < y)) | (negPos & (x < y))))){
//      return Int.new(true, result);
			do solution.setPos(true); //
      return solution;
    }
    // (-1)+(-2) or (-2)+(-1), (-1)-(2), (-2)-(1) = -3
    if((add & negNeg) | (~add & ((posNeg & (x < y)) | (negPos & ~(x < y))))){
//      return Int.new(false, result);
			do solution.setPos(false);
			return solution;
    }

//    let result = bigger - smaller;

		do solution.setNum(bigger - smaller); // |2-1| = |1|
		// (-1)+(2) or (2)+(-1), (-1)-(-2), (2)-(1) = +1
    if((add & posNeg) | (~add & ((negNeg & (x < y)) | (posPos & (x > y))))){
//      return Int.new(true, result);
			do solution.setPos(true);
			return solution;
    }
    // (1)+(-2) or (-2)+(1), (-2)-(-1), (1)-(2) = -1
    if((add & negPos) | (~add & ((negNeg & (x > y)) | (posPos & (x < y))))){
//      return Int.new(false, result);
			do solution.setPos(false);
			return solution;
    }
    do Out.ln("invalid Int Calculation");
    return null;
  }

  method boolean equals(Int b){
    return (pos = b.pos()) & (num = b.num());
  }

  method boolean isLessThan(Int b){
    if (pos = b.pos()){
      if (pos){
        return (num < b.num());
      }
      return (num > b.num());
    }
    if (pos){
      return false;
    }
    return true;
  }

  method boolean isGreaterThan(Int b){
    return ~(isLessThan(b) | equals(b));
  }

  method String toString(){
  var String numS, mnumS, sign;
  let sign = "-";
  let numS = String.new(6);
    do numS.setInt(num);
    if (pos) {
      return numS;
    } else {
      let mnumS = S.append(sign, numS);
      return mnumS;
    }
  }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
    }
}
