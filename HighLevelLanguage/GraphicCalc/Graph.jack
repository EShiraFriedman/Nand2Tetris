class Graph {
	field Equation equation;
	field Const C;

	/** Constructs a new graph */
  constructor Graph new(Const const) {
     let const = const;
//    let t55 = Int.new(true, 255);
//    let o27 = Int.new(true, 127);
    return this;
  }


  method void drawPoint(Point p) {
    var Coord c;
    let c = p.toCoord();
    do drawPixel(c);
    return;
  }

  method void drawPixel(Coord coord) {
    if (coord.isValidCoord()) {
      do Screen.drawPixel(coord.x(), coord.y());
    }
      return;
  }

	/** Draws x- and y-axes with arrows */
	method void drawAxes() {
    // x-axis
    do Screen.drawLine(255, 0, 255, 255);

    // y-axis
    do Screen.drawLine(0, 127, 511, 127);

    // left arrow
    do Screen.drawLine(4, 124, 0, 127);
    do Screen.drawLine(4, 130, 0, 127);

    // right arrow
    do Screen.drawLine(507, 124, 511, 127);
    do Screen.drawLine(507, 130, 511, 127);

    // top arrow
    do Screen.drawLine(252, 4, 255, 0);
    do Screen.drawLine(258, 4, 255, 0);

    // bottom arrow
    do Screen.drawLine(252, 251, 255, 255);
    do Screen.drawLine(258, 251, 255, 255);

    return;
  }


	/** Draws a line using an equation scaled to fit within (-255, -127) to (255, 127) */
	method void drawScaledLine(Equation equation) {
		if (equation.getXIsScreenCutoff()) {
//			do Graph.drawXCutoffLine(equation, 0, 50);
//			do Graph.drawXCutoffLine(equation, 50, 100);
//			do Graph.drawXCutoffLine(equation, 100, 150);
			do drawXCutoffLine(equation, 150, 200);
			do drawXCutoffLine(equation, 200, 250);
			do drawXCutoffLine(equation, 250, 300);
//			do Graph.drawXCutoffLine(equation, 300, 350);
//			do Graph.drawXCutoffLine(equation, 350, 400);
//			do Graph.drawXCutoffLine(equation, 400, 450);
//			do Graph.drawXCutoffLine(equation, 450, 500);
//			do Graph.drawXCutoffLine(equation, 500, 511);
		} else {
//			do Graph.drawYCutoffLine(equation, 0, 50);
			do drawYCutoffLine(equation, 50, 100);
			do drawYCutoffLine(equation, 100, 150);
			do drawYCutoffLine(equation, 150, 200);
//			do Graph.drawYCutoffLine(equation, 200, 255);
		}
		return;
	}


	method void drawYCutoffLine(Equation equation, int i, int j) {
		var Fraction yF, xF;
    var Int iI, deltaI, one, o27;

    let o27 = Int.new(true, 127);
    let one = Int.new(true, 1);
    while(i < j){
      let iI = Int.new(true, i);
      // Mental post-it note: may want to set these anonymous Ints to variables so I can deallocate them
      let deltaI = iI.minus(o27);
      let yF = Fraction.new(deltaI, one);
      let xF = equation.solveForX(yF);
      do drawValidScaledPoint(xF, yF);
      let i = i + 1;
//      do o27.dispose();
//      do one.dispose();
//      do yF.dispose();
//      do xF.dispose();
    }

    return;
	}

	method void drawXCutoffLine(Equation equation, int i, int j) {
		var Fraction yF, xF;
		var Int iI, deltaI, one, t55;
		let one = Int.new(true, 1);
		let t55 = Int.new(true, 255);
    while(i < j){
      let iI = Int.new(true, i);
      // Mental post-it note: may want to set these anonymous Ints to variables so I can deallocate them
      let deltaI = iI.minus(t55);
			let xF = Fraction.new(deltaI, one);
      let yF = equation.solveForY(xF);
      do drawValidScaledPoint(xF, yF);
			let i = i + 1;
//			do one.dispose();
//			do t55.dispose();
//			do yF.dispose();
//			do xF.dispose();
    }
		return;
	}

	method void drawValidScaledPoint(Fraction xF, Fraction yF) {
		var Int x, y;
		var Point p;
		let x = Int.new(xF.pos(), xF.toInt());
    let y = Int.new(yF.pos(), yF.toInt());
    let p = Point.new(x, y);
    if (p.isValidPoint()){
//      do Out.ln(p.toString());
      do drawPoint(p);
    }
  	return;
	}

	/** Returns an equation comparable to the given equation but scaled to fit within (-255, -127) to (255, 127) */
  method Equation getScaledLine(Equation e) {
    var Fraction CUTOFF, ONETWENTYSEVEN, TWO, ONESEVENTY, yIncpt, xIncpt, xIncptTwice,
    scale, b, m, cutoffTotal, newB;
    var Equation scaledEquation;
    var boolean xIsGreater;
		let CUTOFF = Fraction.new(Int.new(true, 3), Int.new(true, 2));
		let ONESEVENTY = Fraction.new(Int.new(true, 170), Int.new(true, 1));
    let ONETWENTYSEVEN = Fraction.new(Int.new(true, 127), Int.new(true, 1));
		let TWO = Fraction.new(Int.new(true, 2), Int.new(true, 1));
    let yIncpt = e.getYIntercept();
    let xIncpt = e.getXIntercept();
		do yIncpt.checkValid();
		do xIncpt.checkValid();
		let scaledEquation = Equation.convertToSlopeIntercept(e);
		let b = scaledEquation.getYIntercept();
		let xIncptTwice = xIncpt.times(TWO);
		if(xIncptTwice.isGreaterThan(yIncpt)){
			let xIsGreater = true;
			let m = scaledEquation.getSlope();
			let newB = m.times(ONESEVENTY);
		} else {
			let xIsGreater = false;
			let cutoffTotal = CUTOFF.times(b);
			let scale = ONETWENTYSEVEN.dividedBy(cutoffTotal);
			let newB = scale.times(b);
		}
		do scaledEquation.setB(newB);
		do scaledEquation.setXIsScreenCutoff(xIsGreater);

    return scaledEquation;
  }
}
