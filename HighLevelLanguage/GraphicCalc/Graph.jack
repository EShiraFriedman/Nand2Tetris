class Graph {
	static Equation equation;
	static Point currPoint;
	static Fraction currX, currY;
	static int iX, iY, iIndex, deltaI;
	static Coord coord;

	/** Constructs a new graph */
	constructor Graph new() {
		return this;
	}

	/** Initiates static variables */
	function void init() {
		let currX = Const.f1();
		let currY = Const.f1();
		let iX = 1;
		let iY = 1;
		let iIndex = 1;
		let deltaI = 1;
		let currPoint = Point.new(iX, iY);
		let coord = currPoint.toCoord();
		return;
	}

	/** Disposes static variables */
	function void deInit() {
		do equation.dispose();
		do currPoint.dispose();
		do currX.dispose();
		do currY.dispose();
		do coord.dispose();
		return;
	}

	/** Draws x- and y-axes with arrows */
	function void drawAxes(Fraction scale) {
		// x-axis
		do Screen.drawLine(255, 0, 255, 255);

		// y-axis
		do Screen.drawLine(0, 127, 511, 127);

		// left arrow
		do Screen.drawLine(4, 124, 0, 127);
		do Screen.drawLine(4, 130, 0, 127);

		// right arrow
		do Screen.drawLine(507, 124, 511, 127);
		do Screen.drawLine(507, 130, 511, 127);

		// top arrow
		do Screen.drawLine(252, 4, 255, 0);
		do Screen.drawLine(258, 4, 255, 0);

		// bottom arrow
		do Screen.drawLine(252, 251, 255, 255);
		do Screen.drawLine(258, 251, 255, 255);

		do Graph.drawTicks();
		do Graph.drawTickLabels(scale);
		return;
	}

	function void drawTicks() {
		do Screen.drawLine(31, 126, 31, 128);
		do Screen.drawLine(63, 124, 63, 130);
		do Screen.drawLine(95, 126, 95, 128);
		do Screen.drawLine(127, 124, 127, 130);
		do Screen.drawLine(159, 126, 159, 128);
		do Screen.drawLine(191, 124, 191, 130);
		do Screen.drawLine(223, 126, 223, 128);

		do Screen.drawLine(287, 126, 287, 128);
		do Screen.drawLine(319, 124, 319, 130);
		do Screen.drawLine(351, 126, 351, 128);
		do Screen.drawLine(383, 124, 383, 130);
		do Screen.drawLine(415, 126, 415, 128);
		do Screen.drawLine(447, 124, 447, 130);
		do Screen.drawLine(479, 126, 479, 128);

		do Screen.drawLine(254, 223, 256, 223);
		do Screen.drawLine(252, 191, 258, 191);
		do Screen.drawLine(254, 159, 256, 159);
		do Screen.drawLine(254, 95, 256, 95);
		do Screen.drawLine(252, 63, 258, 63);
		do Screen.drawLine(254, 31, 256, 31);

		return;
	}

	/** Returns an equation comparable to the given equation but scaled to fit within (-255, -127) and (255, 127) */
	function Equation getScaledLine(Equation e) {
		var Fraction CUTOFF, yIncpt, xIncpt, xIncptTwice, scale, b, m, cutoffTotal, newB, oldB, XYLimit, negXYLimit;
		var Equation scaledEquation;
		var boolean xIsGreater;
		var int n, d;

		let CUTOFF = Fraction.new(3, 2);
		let XYLimit = Fraction.new(201, 100);
    let negXYLimit = Fraction.new(-201, 100);
    let newB = Const.f1();
    let scale = Const.f1();

		let yIncpt = e.getYIntercept();
		let xIncpt = e.getXIntercept();
		do yIncpt.checkValid();
		do xIncpt.checkValid();

		let scaledEquation = Equation.convertToSlopeIntercept(e);
		let m = scaledEquation.getSlope();
		let oldB = scaledEquation.getB();

		// if m is in between -2 and 2, draw from bottom to top
		if ((m.pos() = true & m.isLessThan(XYLimit)) | (m.pos() = false & m.isGreaterThan(negXYLimit))){
			let xIsGreater = false;
			let m = scaledEquation.getSlope();
			do newB.setProduct(m, Const.f170());
			do scale.setQuotient(oldB, newB);
			do scaledEquation.setScale(scale);

		// otherwise, it will start from the left and go to the right
		} else {
			let b = scaledEquation.getYIntercept();
			let xIsGreater = true;
			do cutoffTotal.setProduct(CUTOFF, b);
			do scale.setQuotient(Const.f127(), cutoffTotal);
			do scaledEquation.setScale(scale);
			do newB.setProduct(scale, b);
		}

		do scaledEquation.setB(newB);
		do scaledEquation.setXIsScreenCutoff(xIsGreater);
		do Sys.wait(2000);
		return scaledEquation;
	}

	/** Draws a line using an equation scaled to fit within (-255, -127) to (255, 127) */
	function void drawScaledLine(Equation e) {
		let equation = e;
		if (equation.getXIsScreenCutoff()) {
			do Graph.drawYCutoffLine(0, 256);
		} else {
			do Graph.drawXCutoffLine(0, 512);
		}
		return;
	}


	function void drawYCutoffLine(int i, int j) {
		while(i < j){
			let deltaI = i - 127;
			do currY.set(deltaI, 1);
			let currX = equation.solveForX(currY);
			do Graph.drawValidScaledPoint();
			let i = i + 1;
		}
		return;
	}

	function void drawXCutoffLine(int i, int j) {
		while(i < j){
			let deltaI = i - 255;
			do currX.set(deltaI, 1);
			let currY = equation.solveForY(currX);
			do Graph.drawValidScaledPoint();
			let i = i + 1;
		}
		return;
	}

	function void drawValidScaledPoint() {
		do currPoint.setX(currX.toInt());
		do currPoint.setY(currY.toInt());
		if (currPoint.isValidPoint()){
			do Graph.drawPoint();
		}
		return;
	}

	function void drawPoint() {
		let coord = currPoint.toCoord();
		do Graph.drawPixel();
		return;
	}

	function void drawPixel() {
		if (coord.isValidCoord()) {
			do Screen.drawPixel(coord.x(), coord.y());
		}
			return;
	}

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

	function void drawTickLabels(Fraction scale) {
		var Fraction val;
		var Array fLabels, ticks;
		var int i, x, y, length;
		var String label;

		let ticks = Const.ticks();
		let val = Const.f1();
		let fLabels = Graph.getTickLabelValues(scale);

		let i = 0;
		while(i < 20){
			let val = fLabels[i];
			// TODO: conditionally set the decimal places according to how big the space is between each tick
			let label = val.toDecimal(1);
			let length = label.length();

			if (S.includes(label, ".") = true){
				let length = ((length - 1) * 6) + 2;
			} else {
				let length = length * 6;
			}

			if (i < 14) {
				let x = ticks[i] - (length/2);
				let y = 132;
			} else {
				let x = 253 - length;
				let y = ticks[i] - 3;
			}
			do Out.drawWord(label, x, y);
			let i = i + 1;
		}
		return;
	}

	function Array getTickLabelValues(Fraction scale) {
		var Fraction label;
		var Array labels, tickPoints, tickInts;
		var int i, tickPos;

		let labels = Array.new(20);
		let tickPoints = Array.new(20);
		let tickInts = Array.new(20);

		let tickInts[0] = -224;
		let tickInts[1] = -192;
		let tickInts[2] = -160;
		let tickInts[3] = -128;
		let tickInts[4] = -96;
		let tickInts[5] = -64;
		let tickInts[6] = -32;
		let tickInts[7] = 32;
		let tickInts[8] = 64;
		let tickInts[9] = 96;
		let tickInts[10] = 128;
		let tickInts[11] = 160;
		let tickInts[12] = 192;
		let tickInts[13] = 224;
		let tickInts[14] = 96;
		let tickInts[15] = 64;
		let tickInts[16] = 32;
		let tickInts[17] = -32;
		let tickInts[18] = -64;
		let tickInts[19] = -96;

		let i = 0;
		while (i < 20){
			let label = Fraction.new(tickInts[i], 1);
			let tickPos = 1;
			if (~(scale.pos() = label.pos())){
				let tickPos = -1;
			}
			let tickPoints[i] = Fraction.new(tickPos * scale.numerator() * label.numerator(), scale.denominator() * label.denominator());
			let i = i + 1;
		}

		return tickPoints;
	}
}
