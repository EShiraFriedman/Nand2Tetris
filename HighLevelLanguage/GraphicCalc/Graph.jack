class Graph {
	static Equation equation;
	static Point currPoint;
	static Fraction currX, currY;
	static Int iX, iY, iIndex, deltaI;
	static Coord coord;

	/** Constructs a new graph */
  constructor Graph new() {
    return this;
  }

	/** Initiates static variables */
	function void init() {
		let currX = Fraction.new(Const.i1(), Const.i1());
		let currY = Fraction.new(Const.i1(), Const.i1());
		let iX = Int.new(true, 1);
		let iY = Int.new(true, 1);
		let iIndex = Int.new(true, 1);
		let deltaI = Int.new(true, 1);
		let currPoint = Point.new(iX, iY);
		let coord = currPoint.toCoord();
		return;
	}

	/** Disposes static variables */
	function void deInit() {
		do equation.dispose();
		do currPoint.dispose();
		do currX.dispose();
		do currY.dispose();
		do iX.dispose();
		do iY.dispose();
		do iIndex.dispose();
		do deltaI.dispose();
		do coord.dispose();
		return;
	}

	/** Draws x- and y-axes with arrows */
	function void drawAxes(Fraction scale) {
    // x-axis
    do Screen.drawLine(255, 0, 255, 255);

    // y-axis
    do Screen.drawLine(0, 127, 511, 127);

    // left arrow
    do Screen.drawLine(4, 124, 0, 127);
    do Screen.drawLine(4, 130, 0, 127);

    // right arrow
    do Screen.drawLine(507, 124, 511, 127);
    do Screen.drawLine(507, 130, 511, 127);

    // top arrow
    do Screen.drawLine(252, 4, 255, 0);
    do Screen.drawLine(258, 4, 255, 0);

    // bottom arrow
    do Screen.drawLine(252, 251, 255, 255);
    do Screen.drawLine(258, 251, 255, 255);

    do Graph.drawTicks();
    do Graph.drawTickLabels(scale);
    return;
  }

  function void drawTicks() {
    do Screen.drawLine(31, 126, 31, 128);
    do Out.drawDigit(0, 29, 130);
    do Screen.drawLine(63, 124, 63, 130);
    do Screen.drawLine(95, 126, 95, 128);
    do Screen.drawLine(127, 124, 127, 130);
    do Screen.drawLine(159, 126, 159, 128);
    do Screen.drawLine(191, 124, 191, 130);
    do Screen.drawLine(223, 126, 223, 128);

    do Screen.drawLine(287, 126, 287, 128);
    do Screen.drawLine(319, 124, 319, 130);
    do Screen.drawLine(351, 126, 351, 128);
    do Screen.drawLine(383, 124, 383, 130);
    do Screen.drawLine(415, 126, 415, 128);
    do Screen.drawLine(447, 124, 447, 130);
    do Screen.drawLine(479, 126, 479, 128);

    do Screen.drawLine(254, 223, 256, 223);
    do Screen.drawLine(252, 191, 258, 191);
    do Screen.drawLine(254, 159, 256, 159);
    do Screen.drawLine(254, 95, 256, 95);
    do Screen.drawLine(252, 63, 258, 63);
    do Screen.drawLine(254, 31, 256, 31);


		return;
  }

	/** Returns an equation comparable to the given equation but scaled to fit within (-255, -127) and (255, 127) */
  function Equation getScaledLine(Equation e) {
    var Fraction CUTOFF, TWO, ONESEVENTY, yIncpt, xIncpt, xIncptTwice,
    scale, b, m, cutoffTotal, newB, calc1, calc2, calc3, calc4, calc5,
    calc6, calc7, calc8, calc9, calc10, calc11, calc12, calc13, oldB;
    var Equation scaledEquation;
    var boolean xIsGreater;
    var int n, d;
		let CUTOFF = Fraction.new(Int.new(true, 3), Const.i2());
		let ONESEVENTY = Fraction.new(Int.new(true, 170), Const.i1());
		let TWO = Fraction.new(Const.i2(), Const.i1());
		let calc1 = Fraction.new(Const.i1(), Const.i1());
		let calc2 = Fraction.new(Const.i1(), Const.i1());
		let calc3 = Fraction.new(Const.i1(), Const.i1());
		let calc4 = Fraction.new(Const.i1(), Const.i1());
		let calc5 = Fraction.new(Const.i1(), Const.i1());
		let calc6 = Fraction.new(Const.i1(), Const.i1());
		let calc7 = Fraction.new(Const.i1(), Const.i1());
		let calc8 = Fraction.new(Const.i1(), Const.i1());
		let calc9 = Fraction.new(Const.i1(), Const.i1());
		let calc10 = Fraction.new(Const.i1(), Const.i1());
		let calc11 = Fraction.new(Const.i1(), Const.i1());
		let calc12 = Fraction.new(Const.i1(), Const.i1());
		let calc13 = Fraction.new(Const.i1(), Const.i1());
		let newB = Fraction.new(Const.i1(), Const.i1());
    let yIncpt = e.getYIntercept();
    let xIncpt = e.getXIntercept();
		do yIncpt.checkValid();
		do xIncpt.checkValid();
		let scaledEquation = Equation.convertToSlopeIntercept(e);
		do Out.ln(scaledEquation.toString());
		let m = scaledEquation.getSlope();
		let oldB = scaledEquation.getB();
// if m is in between -1 and 1, draw from bottom to top
		if ((m.pos() = true & m.isLessThan(Const.f1())) | (m.pos() = false & m.isGreaterThan(Const.fNeg1()))){
			let xIsGreater = false;
			let m = scaledEquation.getSlope();
			do Fraction.multiply(m, ONESEVENTY, newB, calc1, calc2, calc3, calc4, calc5, calc6);
// otherwise, it will start from the left and go to the right
		} else {
			let b = scaledEquation.getYIntercept();
			let xIsGreater = true;
			let cutoffTotal = Fraction.new(Const.i1(), Const.i1());
			let scale = Fraction.new(Const.i1(), Const.i1());
			do Fraction.multiply(CUTOFF, b, cutoffTotal, calc1, calc2, calc3, calc4, calc5, calc6);
			let calc7 = Const.f127();
			let scale = calc7.dividedBy(cutoffTotal);
			do scaledEquation.setScale(scale);
			do Fraction.multiply(scale, b, newB, calc8, calc9, calc10, calc11, calc12, calc13);
		}
		do scaledEquation.setB(newB);
		do scaledEquation.setScale(newB.dividedBy(oldB));
		do scaledEquation.setXIsScreenCutoff(xIsGreater);
		do Sys.wait(2000);
    return scaledEquation;
  }

	/** Draws a line using an equation scaled to fit within (-255, -127) to (255, 127) */
	function void drawScaledLine(Equation e) {
		let equation = e;
		if (equation.getXIsScreenCutoff()) {
			do Graph.drawYCutoffLine(0, 256);
		} else {
			do Graph.drawXCutoffLine(0, 512);
		}
		return;
	}


	function void drawYCutoffLine(int i, int j) {
    while(i < j){
      do iIndex.set(true, i);
      let deltaI = iIndex.minus(Const.i127());
      do currY.set(deltaI, Const.i1());
      let currX = equation.solveForX(currY);
      do Graph.drawValidScaledPoint();
      let i = i + 1;
    }
    return;
	}

	function void drawXCutoffLine(int i, int j) {
    while(i < j){
      do iIndex.set(true, i);
      let deltaI = iIndex.minus(Const.i255());
      do currX.set(deltaI, Const.i1());
      let currY = equation.solveForY(currX);
      do Graph.drawValidScaledPoint();
			let i = i + 1;
    }
		return;
	}

	function void drawValidScaledPoint() {
		do iX.set(currX.pos(), currX.toInt());
		do iY.set(currY.pos(), currY.toInt());
		do currPoint.setX(iX);
		do currPoint.setY(iY);
    if (currPoint.isValidPoint()){
      do Graph.drawPoint();
    }
  	return;
	}

	function void drawPoint() {
	  let coord = currPoint.toCoord();
	  do Graph.drawPixel();
	  return;
	}

  function void drawPixel() {
    if (coord.isValidCoord()) {
      do Screen.drawPixel(coord.x(), coord.y());
    }
      return;
  }

	method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  function void drawTickLabels(Fraction scale) {
      var Fraction val;
      var Array fLabels;
      var int i;
      var String label;
      let val = Fraction.new(Const.i1(), Const.i1());
      let fLabels = Graph.getTickLabelValues(scale);
      let i = 0;
      while(i < 20){
        let val = fLabels[i];
        let label = val.toString();
        do Out.ln(label);
        let i = i + 1;
      }
//    first 14 are on the x axis, last 6 are on the y axis
//    if(tickNumber = 0){
//      do Graph.drawDigit(0);
//    }
    return;
  }

  function Array getTickLabelValues(Fraction scale) {
    var Int xTick1, xTick2, xTick3, xTick4, xTick5, xTick6, xTick7, xTick8, xTick9, xTick10, xTick11, xTick12, xTick13, xTick14,
      yTick1, yTick2, yTick3, yTick4, yTick5, yTick6;
    var Fraction calc1, calc2, calc3, calc4, calc5, calc6;

    var Array labels, tickPoints;
    var int i;

    let calc1 = Fraction.new(Const.i1(), Const.i1());
    let calc2 = Fraction.new(Const.i1(), Const.i1());
    let calc3 = Fraction.new(Const.i1(), Const.i1());
    let calc4 = Fraction.new(Const.i1(), Const.i1());
    let calc5 = Fraction.new(Const.i1(), Const.i1());
    let calc6 = Fraction.new(Const.i1(), Const.i1());

    let labels = Array.new(20);
    let tickPoints = Array.new(20);

    let xTick1 = Int.new(false, 224);
    let xTick2 = Int.new(false, 192);
    let xTick3 = Int.new(false, 160);
    let xTick4 = Int.new(false, 128);
    let xTick5 = Int.new(false, 96);
    let xTick6 = Int.new(false, 64);
    let xTick7 = Int.new(false, 32);
    let xTick8 = Int.new(true, 32);
    let xTick9 = Int.new(true, 64);
    let xTick10 = Int.new(true, 96);
    let xTick11 = Int.new(true, 128);
    let xTick12 = Int.new(true, 160);
    let xTick13 = Int.new(true, 192);
    let xTick14 = Int.new(true, 224);

    let yTick1 = Int.new(false, 96);
    let yTick2 = Int.new(false, 64);
    let yTick3 = Int.new(false, 32);
    let yTick4 = Int.new(true, 32);
    let yTick5 = Int.new(true, 64);
    let yTick6 = Int.new(true, 96);

    let labels[0] = Fraction.new(xTick1, Const.i1());
    let labels[1] = Fraction.new(xTick2, Const.i1());
    let labels[2] = Fraction.new(xTick3, Const.i1());
    let labels[3] = Fraction.new(xTick4, Const.i1());
    let labels[4] = Fraction.new(xTick5, Const.i1());
    let labels[5] = Fraction.new(xTick6, Const.i1());
    let labels[6] = Fraction.new(xTick7, Const.i1());
    let labels[7] = Fraction.new(xTick8, Const.i1());
    let labels[8] = Fraction.new(xTick9, Const.i1());
    let labels[9] = Fraction.new(xTick10, Const.i1());
    let labels[10] = Fraction.new(xTick11, Const.i1());
    let labels[11] = Fraction.new(xTick12, Const.i1());
    let labels[12] = Fraction.new(xTick13, Const.i1());
    let labels[13] = Fraction.new(xTick14, Const.i1());

    let labels[14] = Fraction.new(yTick1, Const.i1());
    let labels[15] = Fraction.new(yTick2, Const.i1());
    let labels[16] = Fraction.new(yTick3, Const.i1());
    let labels[17] = Fraction.new(yTick4, Const.i1());
    let labels[18] = Fraction.new(yTick5, Const.i1());
    let labels[19] = Fraction.new(yTick6, Const.i1());

    let i = 0;
    while (i < 20){
      do Fraction.multiply(scale, labels[i], tickPoints[i], calc1, calc2, calc3, calc4, calc5, calc6);
      let i = i + 1;
    }
    return tickPoints;

  }
}
