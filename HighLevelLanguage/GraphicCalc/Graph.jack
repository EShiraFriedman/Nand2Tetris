class Graph {
	static Equation equation;
	static Point currPoint;
	static Fraction currX, currY;
	static Int iX, iY, iIndex, deltaI;
	static Coord coord;

	/** Constructs a new graph */
  constructor Graph new() {
    return this;
  }

	/** Initiates static variables */
	function void init() {
		let currX = Fraction.new(Const.i1(), Const.i1());
		let currY = Fraction.new(Const.i1(), Const.i1());
		let iX = Int.new(true, 1);
		let iY = Int.new(true, 1);
		let iIndex = Int.new(true, 1);
		let deltaI = Int.new(true, 1);
		let currPoint = Point.new(iX, iY);
		let coord = currPoint.toCoord();
		return;
	}

	/** Disposes static variables */
	function void deInit() {
		do equation.dispose();
		do currPoint.dispose();
		do currX.dispose();
		do currY.dispose();
		do iX.dispose();
		do iY.dispose();
		do iIndex.dispose();
		do deltaI.dispose();
		do coord.dispose();
		return;
	}

	/** Draws x- and y-axes with arrows */
	function void drawAxes() {
    // x-axis
    do Screen.drawLine(255, 0, 255, 255);

    // y-axis
    do Screen.drawLine(0, 127, 511, 127);

    // left arrow
    do Screen.drawLine(4, 124, 0, 127);
    do Screen.drawLine(4, 130, 0, 127);

    // right arrow
    do Screen.drawLine(507, 124, 511, 127);
    do Screen.drawLine(507, 130, 511, 127);

    // top arrow
    do Screen.drawLine(252, 4, 255, 0);
    do Screen.drawLine(258, 4, 255, 0);

    // bottom arrow
    do Screen.drawLine(252, 251, 255, 255);
    do Screen.drawLine(258, 251, 255, 255);

    return;
  }

  function void drawTicks() {
//  TODO
		return;
  }

	/** Returns an equation comparable to the given equation but scaled to fit within (-255, -127) to (255, 127) */
  function Equation getScaledLine(Equation e) {
    var Fraction CUTOFF, TWO, ONESEVENTY, yIncpt, xIncpt, xIncptTwice,
    scale, b, m, cutoffTotal, newB, calc1, calc2, calc3, calc4, calc5, calc6, calc7, calc8, calc9, calc10, calc11, calc12, calc13;
    var Equation scaledEquation;
    var boolean xIsGreater;
		let CUTOFF = Fraction.new(Int.new(true, 3), Const.i2());
		let ONESEVENTY = Fraction.new(Int.new(true, 170), Const.i1());
		let TWO = Fraction.new(Const.i2(), Const.i1());
		let calc1 = Fraction.new(Const.i1(), Const.i1());
		let calc2 = Fraction.new(Const.i1(), Const.i1());
		let calc3 = Fraction.new(Const.i1(), Const.i1());
		let calc4 = Fraction.new(Const.i1(), Const.i1());
		let calc5 = Fraction.new(Const.i1(), Const.i1());
		let calc6 = Fraction.new(Const.i1(), Const.i1());
		let calc7 = Fraction.new(Const.i1(), Const.i1());
		let calc8 = Fraction.new(Const.i1(), Const.i1());
		let calc9 = Fraction.new(Const.i1(), Const.i1());
		let calc10 = Fraction.new(Const.i1(), Const.i1());
		let calc11 = Fraction.new(Const.i1(), Const.i1());
		let calc12 = Fraction.new(Const.i1(), Const.i1());
		let calc13 = Fraction.new(Const.i1(), Const.i1());
		let newB = Fraction.new(Const.i1(), Const.i1());
    let yIncpt = e.getYIntercept(); // fraction getYIntercept
    let xIncpt = e.getXIntercept(); // fraction getYIntercept
		do yIncpt.checkValid();
		do xIncpt.checkValid();
		let scaledEquation = Equation.convertToSlopeIntercept(e); // equation convertToSlopeIntercept
		let m = scaledEquation.getSlope();
		if (m.isLessThan(Const.f1())){
			let xIsGreater = false;
			let m = scaledEquation.getSlope();
			do Fraction.multiply(m, ONESEVENTY, newB, calc1, calc2, calc3, calc4, calc5, calc6); // fraction product
		} else {
			let b = scaledEquation.getYIntercept();
			let xIsGreater = true;
			let cutoffTotal = Fraction.new(Const.i1(), Const.i1());
			let scale = Fraction.new(Const.i1(), Const.i1());
			do Fraction.multiply(CUTOFF, b, cutoffTotal, calc1, calc2, calc3, calc4, calc5, calc6); // fraction product
			let calc7 = Const.f127();
			let scale = calc7.dividedBy(cutoffTotal);
			do Fraction.multiply(scale, b, newB, calc8, calc9, calc10, calc11, calc12, calc13); // fraction product
		}
		do scaledEquation.setB(newB);
		do scaledEquation.setXIsScreenCutoff(xIsGreater);
		do Sys.wait(2000);
    return scaledEquation;
  }

	/** Draws a line using an equation scaled to fit within (-255, -127) to (255, 127) */
	function void drawScaledLine(Equation e) {
		let equation = e;
		if (equation.getXIsScreenCutoff()) {
			do Graph.drawYCutoffLine(0, 256);
		} else {
			do Graph.drawXCutoffLine(0, 512);
		}
		return;
	}


	function void drawYCutoffLine(int i, int j) {
    while(i < j){
      do iIndex.set(true, i);
      let deltaI = iIndex.minus(Const.i127()); // Int difference
      do currY.set(deltaI, Const.i1());
      let currX = equation.solveForX(currY); // Frac solveForX
      do Graph.drawValidScaledPoint();
      let i = i + 1;
    }
    return;
	}

	function void drawXCutoffLine(int i, int j) {
    while(i < j){
      do iIndex.set(true, i);
      let deltaI = iIndex.minus(Const.i255()); // Int difference
      do currX.set(deltaI, Const.i1());
      let currY = equation.solveForY(currX); // Int solveForY
      do Graph.drawValidScaledPoint();
			let i = i + 1;
    }
		return;
	}

	function void drawValidScaledPoint() {
		do iX.set(currX.pos(), currX.toInt());
		do iY.set(currY.pos(), currY.toInt());
		do currPoint.setX(iX);
		do currPoint.setY(iY);
    if (currPoint.isValidPoint()){
      do Graph.drawPoint();
    }
  	return;
	}

	function void drawPoint() {
	  let coord = currPoint.toCoord();
	  do Graph.drawPixel();
	  return;
	}

  function void drawPixel() {
    if (coord.isValidCoord()) {
      do Screen.drawPixel(coord.x(), coord.y());
    }
      return;
  }

	method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  function void labelTickMark(int x, int y, int number, int direction) {
		return;
  }

  function void drawDigit(int number, int x, int y) {
    if (number = 1){
      do Screen.drawPixel(x + 1, y + 1);
      do Screen.drawPixel(x + 1, y + 6);
      do Screen.drawPixel(x + 2, y + 0);
      do Screen.drawPixel(x + 2, y + 1);
      do Screen.drawPixel(x + 2, y + 2);
      do Screen.drawPixel(x + 2, y + 3);
      do Screen.drawPixel(x + 2, y + 4);
      do Screen.drawPixel(x + 2, y + 5);
      do Screen.drawPixel(x + 2, y + 6);
      do Screen.drawPixel(x + 3, y + 6);
    }
    if (number = 2){
      do Screen.drawPixel(x + 0, y + 1);
      do Screen.drawPixel(x + 0, y + 6);
      do Screen.drawPixel(x + 1, y + 0);
      do Screen.drawPixel(x + 1, y + 5);
      do Screen.drawPixel(x + 1, y + 6);
      do Screen.drawPixel(x + 2, y + 0);
      do Screen.drawPixel(x + 2, y + 4);
      do Screen.drawPixel(x + 2, y + 6);
      do Screen.drawPixel(x + 3, y + 0);
      do Screen.drawPixel(x + 3, y + 3);
      do Screen.drawPixel(x + 3, y + 6);
      do Screen.drawPixel(x + 4, y + 1);
      do Screen.drawPixel(x + 4, y + 2);
      do Screen.drawPixel(x + 4, y + 6);
    }
    if (number = 3){
      do Screen.drawPixel(x + 0, y + 1);
      do Screen.drawPixel(x + 0, y + 5);
      do Screen.drawPixel(x + 1, y + 0);
      do Screen.drawPixel(x + 1, y + 6);
      do Screen.drawPixel(x + 2, y + 0);
      do Screen.drawPixel(x + 2, y + 3);
      do Screen.drawPixel(x + 2, y + 6);
      do Screen.drawPixel(x + 3, y + 0);
      do Screen.drawPixel(x + 3, y + 3);
      do Screen.drawPixel(x + 3, y + 6);
      do Screen.drawPixel(x + 4, y + 1);
      do Screen.drawPixel(x + 4, y + 2);
      do Screen.drawPixel(x + 4, y + 4);
      do Screen.drawPixel(x + 4, y + 5);
    }
    if (number = 4){
      do Screen.drawPixel(x + 0, y + 3);
      do Screen.drawPixel(x + 0, y + 4);
      do Screen.drawPixel(x + 1, y + 2);
      do Screen.drawPixel(x + 1, y + 4);
      do Screen.drawPixel(x + 2, y + 1);
      do Screen.drawPixel(x + 2, y + 4);
      do Screen.drawPixel(x + 3, y + 0);
      do Screen.drawPixel(x + 3, y + 1);
      do Screen.drawPixel(x + 3, y + 2);
      do Screen.drawPixel(x + 3, y + 3);
      do Screen.drawPixel(x + 3, y + 4);
      do Screen.drawPixel(x + 3, y + 5);
      do Screen.drawPixel(x + 3, y + 6);
      do Screen.drawPixel(x + 4, y + 4);
    }
    if (number = 5){
      do Screen.drawPixel(x + 0, y + 0);
      do Screen.drawPixel(x + 0, y + 1);
      do Screen.drawPixel(x + 0, y + 2);
      do Screen.drawPixel(x + 0, y + 3);
      do Screen.drawPixel(x + 0, y + 5);
      do Screen.drawPixel(x + 1, y + 0);
      do Screen.drawPixel(x + 1, y + 3);
      do Screen.drawPixel(x + 1, y + 6);
      do Screen.drawPixel(x + 2, y + 0);
      do Screen.drawPixel(x + 2, y + 3);
      do Screen.drawPixel(x + 2, y + 6);
      do Screen.drawPixel(x + 3, y + 0);
      do Screen.drawPixel(x + 3, y + 3);
      do Screen.drawPixel(x + 3, y + 6);
      do Screen.drawPixel(x + 4, y + 0);
      do Screen.drawPixel(x + 4, y + 4);
      do Screen.drawPixel(x + 4, y + 5);
    }
    if (number = 6){
      do Screen.drawPixel(x + 0, y + 1);
      do Screen.drawPixel(x + 0, y + 2);
      do Screen.drawPixel(x + 0, y + 3);
      do Screen.drawPixel(x + 0, y + 4);
      do Screen.drawPixel(x + 0, y + 5);
      do Screen.drawPixel(x + 1, y + 0);
      do Screen.drawPixel(x + 1, y + 3);
      do Screen.drawPixel(x + 1, y + 6);
      do Screen.drawPixel(x + 2, y + 0);
      do Screen.drawPixel(x + 2, y + 3);
      do Screen.drawPixel(x + 2, y + 6);
      do Screen.drawPixel(x + 3, y + 0);
      do Screen.drawPixel(x + 3, y + 3);
      do Screen.drawPixel(x + 3, y + 6);
      do Screen.drawPixel(x + 4, y + 0);
      do Screen.drawPixel(x + 4, y + 4);
      do Screen.drawPixel(x + 4, y + 5);
    }
    if (number = 7){
      do Screen.drawPixel(x + 0, y + 0);
      do Screen.drawPixel(x + 1, y + 0);
      do Screen.drawPixel(x + 1, y + 4);
      do Screen.drawPixel(x + 1, y + 5);
      do Screen.drawPixel(x + 1, y + 6);
      do Screen.drawPixel(x + 2, y + 0);
      do Screen.drawPixel(x + 2, y + 3);
      do Screen.drawPixel(x + 3, y + 0);
      do Screen.drawPixel(x + 3, y + 2);
      do Screen.drawPixel(x + 4, y + 0);
      do Screen.drawPixel(x + 4, y + 1);
    }
    if (number = 8){
      do Screen.drawPixel(x + 0, y + 1);
      do Screen.drawPixel(x + 0, y + 2);
      do Screen.drawPixel(x + 0, y + 4);
      do Screen.drawPixel(x + 0, y + 5);
      do Screen.drawPixel(x + 1, y + 0);
      do Screen.drawPixel(x + 1, y + 3);
      do Screen.drawPixel(x + 1, y + 6);
      do Screen.drawPixel(x + 2, y + 0);
      do Screen.drawPixel(x + 2, y + 3);
      do Screen.drawPixel(x + 2, y + 6);
      do Screen.drawPixel(x + 3, y + 0);
      do Screen.drawPixel(x + 3, y + 3);
      do Screen.drawPixel(x + 3, y + 6);
      do Screen.drawPixel(x + 4, y + 1);
      do Screen.drawPixel(x + 4, y + 2);
      do Screen.drawPixel(x + 4, y + 4);
      do Screen.drawPixel(x + 4, y + 5);
    }
    if (number = 9){
      do Screen.drawPixel(x + 0, y + 1);
      do Screen.drawPixel(x + 0, y + 2);
      do Screen.drawPixel(x + 0, y + 6);
      do Screen.drawPixel(x + 1, y + 0);
      do Screen.drawPixel(x + 1, y + 3);
      do Screen.drawPixel(x + 1, y + 6);
      do Screen.drawPixel(x + 2, y + 0);
      do Screen.drawPixel(x + 2, y + 3);
      do Screen.drawPixel(x + 2, y + 6);
      do Screen.drawPixel(x + 3, y + 0);
      do Screen.drawPixel(x + 3, y + 3);
      do Screen.drawPixel(x + 3, y + 6);
      do Screen.drawPixel(x + 4, y + 1);
      do Screen.drawPixel(x + 4, y + 2);
      do Screen.drawPixel(x + 4, y + 3);
      do Screen.drawPixel(x + 4, y + 4);
      do Screen.drawPixel(x + 4, y + 5);
    }
    if (number = 0){
      do Screen.drawPixel(x + 0, y + 1);
      do Screen.drawPixel(x + 0, y + 2);
      do Screen.drawPixel(x + 0, y + 3);
      do Screen.drawPixel(x + 0, y + 4);
      do Screen.drawPixel(x + 0, y + 5);
      do Screen.drawPixel(x + 1, y + 0);
      do Screen.drawPixel(x + 1, y + 6);
      do Screen.drawPixel(x + 2, y + 0);
      do Screen.drawPixel(x + 2, y + 6);
      do Screen.drawPixel(x + 3, y + 0);
      do Screen.drawPixel(x + 3, y + 6);
      do Screen.drawPixel(x + 4, y + 1);
      do Screen.drawPixel(x + 4, y + 2);
      do Screen.drawPixel(x + 4, y + 3);
      do Screen.drawPixel(x + 4, y + 4);
      do Screen.drawPixel(x + 4, y + 5);
    }
    return;
  }
}
