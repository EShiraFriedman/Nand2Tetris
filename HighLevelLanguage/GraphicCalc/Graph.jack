class Graph {
	static Equation equation;
	static Point currPoint;
	static Fraction currX, currY;
	static Int iX, iY, iIndex, deltaI;
	static Coord coord;

	/** Constructs a new graph */
	constructor Graph new() {
		return this;
	}

	/** Initiates static variables */
	function void init() {
		let currX = Fraction.new(Const.i1(), Const.i1());
		let currY = Fraction.new(Const.i1(), Const.i1());
		let iX = Int.new(true, 1);
		let iY = Int.new(true, 1);
		let iIndex = Int.new(true, 1);
		let deltaI = Int.new(true, 1);
		let currPoint = Point.new(iX, iY);
		let coord = currPoint.toCoord();
		return;
	}

	/** Disposes static variables */
	function void deInit() {
		do equation.dispose();
		do currPoint.dispose();
		do currX.dispose();
		do currY.dispose();
		do iX.dispose();
		do iY.dispose();
		do iIndex.dispose();
		do deltaI.dispose();
		do coord.dispose();
		return;
	}

	/** Draws x- and y-axes with arrows */
	function void drawAxes(Fraction scale) {
		// x-axis
		do Screen.drawLine(255, 0, 255, 255);

		// y-axis
		do Screen.drawLine(0, 127, 511, 127);

		// left arrow
		do Screen.drawLine(4, 124, 0, 127);
		do Screen.drawLine(4, 130, 0, 127);

		// right arrow
		do Screen.drawLine(507, 124, 511, 127);
		do Screen.drawLine(507, 130, 511, 127);

		// top arrow
		do Screen.drawLine(252, 4, 255, 0);
		do Screen.drawLine(258, 4, 255, 0);

		// bottom arrow
		do Screen.drawLine(252, 251, 255, 255);
		do Screen.drawLine(258, 251, 255, 255);

		do Graph.drawTicks();
		do Graph.drawTickLabels(scale);
		return;
	}

	function void drawTicks() {
		do Screen.drawLine(31, 126, 31, 128);
		do Screen.drawLine(63, 124, 63, 130);
		do Screen.drawLine(95, 126, 95, 128);
		do Screen.drawLine(127, 124, 127, 130);
		do Screen.drawLine(159, 126, 159, 128);
		do Screen.drawLine(191, 124, 191, 130);
		do Screen.drawLine(223, 126, 223, 128);

		do Screen.drawLine(287, 126, 287, 128);
		do Screen.drawLine(319, 124, 319, 130);
		do Screen.drawLine(351, 126, 351, 128);
		do Screen.drawLine(383, 124, 383, 130);
		do Screen.drawLine(415, 126, 415, 128);
		do Screen.drawLine(447, 124, 447, 130);
		do Screen.drawLine(479, 126, 479, 128);

		do Screen.drawLine(254, 223, 256, 223);
		do Screen.drawLine(252, 191, 258, 191);
		do Screen.drawLine(254, 159, 256, 159);
		do Screen.drawLine(254, 95, 256, 95);
		do Screen.drawLine(252, 63, 258, 63);
		do Screen.drawLine(254, 31, 256, 31);

		return;
	}

	/** Returns an equation comparable to the given equation but scaled to fit within (-255, -127) and (255, 127) */
	function Equation getScaledLine(Equation e) {
		var Fraction CUTOFF, TWO, ONESEVENTY, yIncpt, xIncpt, yIncptTwice, scale, b, m, cutoffTotal, newB, calc1, calc2,
		calc3, calc4, calc5, calc6, calc7, calc8, calc9, calc10, calc11, calc12, calc13, oldB, XYLimit, negXYLimit;
		var Equation scaledEquation;
		var boolean xIsGreater;
		var int n, d;
		let CUTOFF = Fraction.new(Int.new(true, 3), Const.i2());
		let ONESEVENTY = Fraction.new(Int.new(true, 170), Const.i1());
		let TWO = Fraction.new(Const.i2(), Const.i1());
		let calc1 = Fraction.new(Const.i1(), Const.i1());
		let calc2 = Fraction.new(Const.i1(), Const.i1());
		let calc3 = Fraction.new(Const.i1(), Const.i1());
		let calc4 = Fraction.new(Const.i1(), Const.i1());
		let calc5 = Fraction.new(Const.i1(), Const.i1());
		let calc6 = Fraction.new(Const.i1(), Const.i1());
		let calc7 = Fraction.new(Const.i1(), Const.i1());
		let calc8 = Fraction.new(Const.i1(), Const.i1());
		let calc9 = Fraction.new(Const.i1(), Const.i1());
		let calc10 = Fraction.new(Const.i1(), Const.i1());
		let calc11 = Fraction.new(Const.i1(), Const.i1());
		let calc12 = Fraction.new(Const.i1(), Const.i1());
		let calc13 = Fraction.new(Const.i1(), Const.i1());
		let newB = Fraction.new(Const.i1(), Const.i1());

		let yIncpt = e.getYIntercept();
		let xIncpt = e.getXIntercept();
		do yIncpt.checkValid();
		do xIncpt.checkValid();
		let scaledEquation = Equation.convertToSlopeIntercept(e);
		let m = scaledEquation.getSlope();
		let oldB = scaledEquation.getB();
		let XYLimit = Fraction.new(Int.new(true, 101), Int.new(true, 100));
		let negXYLimit = Fraction.new(Int.new(false, 101), Int.new(true, 100));

		// if m is in between -1 and 1, draw from bottom to top (includes perfectly vertical lines)
		if ((m.pos() = true & m.isLessThan(XYLimit)) | (m.pos() = false & m.isGreaterThan(negXYLimit))){
			let xIsGreater = false;
			let m = scaledEquation.getSlope();
			do Fraction.multiply(m, ONESEVENTY, newB, calc1, calc2, calc3, calc4, calc5, calc6);

		// otherwise, it will start from the left and go to the right (includes perfectly horizontal lines)
		} else {
			let b = scaledEquation.getYIntercept();
			let xIsGreater = true;
			let cutoffTotal = Fraction.new(Const.i1(), Const.i1());
			let scale = Fraction.new(Const.i1(), Const.i1());
			do Fraction.multiply(CUTOFF, b, cutoffTotal, calc1, calc2, calc3, calc4, calc5, calc6);
			let calc7 = Const.f127();
			let scale = calc7.dividedBy(cutoffTotal);
			do scaledEquation.setScale(scale);
			do Fraction.multiply(scale, b, newB, calc8, calc9, calc10, calc11, calc12, calc13);
		}

		do scaledEquation.setB(newB);
		// if oldB and newB are not 0
		do scaledEquation.setScale(oldB.dividedBy(newB));
		// otherwise...?

		do scaledEquation.setXIsScreenCutoff(xIsGreater);
		do Sys.wait(2000);
		return scaledEquation;
	}

	/** Draws a line using an equation scaled to fit within (-255, -127) to (255, 127) */
	function void drawScaledLine(Equation e) {
		let equation = e;
		if (equation.getXIsScreenCutoff()) {
			do Graph.drawLineVertically(0, 255);
		} else {
			do Graph.drawLineHorizontally(0, 511);
		}
		return;
	}

	// a line that is drawn from the bottom of the screen to the top (includes perfectly vertical lines x = b)
	function void drawLineVertically(int i, int j) {
		while(i < j){
			do iIndex.set(true, i);
			let deltaI = iIndex.minus(Const.i127());
			do currY.set(deltaI, Const.i1());
			let currX = equation.solveForX(currY);
			do Graph.drawValidScaledPoint();
			let i = i + 1;
		}
		return;
	}

	// a line that is drawn from the left of the screen to the right (includes perfectly horizontal lines y = b)
	function void drawLineHorizontally(int i, int j) {
		while(i < j){
			do iIndex.set(true, i);
			let deltaI = iIndex.minus(Const.i255());
			do currX.set(deltaI, Const.i1());
			let currY = equation.solveForY(currX);
			do Graph.drawValidScaledPoint();
			let i = i + 1;
		}
		return;
	}

	function void drawValidScaledPoint() {
		do iX.set(currX.pos(), currX.toInt());
		do iY.set(currY.pos(), currY.toInt());
		do currPoint.setX(iX);
		do currPoint.setY(iY);
		if (currPoint.isValidPoint()){
			do Graph.drawPoint();
		}
		return;
	}

	function void drawPoint() {
		let coord = currPoint.toCoord();
		do Graph.drawPixel();
		return;
	}

	function void drawPixel() {
		if (coord.isValidCoord()) {
			do Screen.drawPixel(coord.x(), coord.y());
		}
			return;
	}

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

	function void drawTickLabels(Fraction scale) {
		var Fraction val;
		var Int valInt;
		var Array fLabels, ticks;
		var int i, x, y, length;
		var String label;
		let ticks = Const.ticks();
		let val = Fraction.new(Const.i1(), Const.i1());
		let fLabels = Graph.getTickLabelValues(scale);

		let i = 0;
		while(i < 20){
			let val = fLabels[i];
			let label = val.toDecimal(1);
			let length = label.length();

			// width of each numeral is 6px and the width of a decimal is 2px
			if (S.includes(label, ".") = true){
				let length = ((length - 1) * 6) + 2;
			} else {
				let length = length * 6;
			}
			// determines where to start the label based on its length
			if (i < 14) { // x-axis ticks
				let x = ticks[i] - (length/2);
				let y = 132;
			} else { // y-axis ticks
				let x = 253 - length;
				let y = ticks[i] - 3;
			}
			do Out.drawWord(label, x, y);
			let i = i + 1;
		}
		return;
	}

	function Array getTickLabelValues(Fraction scale) {
		var Fraction calc1, calc2, calc3, calc4, calc5, calc6, label;
		var Array tickPoints;
		var int i, mult;
		var boolean isPos;

		let calc1 = Fraction.new(Const.i1(), Const.i1());
		let calc2 = Fraction.new(Const.i1(), Const.i1());
		let calc3 = Fraction.new(Const.i1(), Const.i1());
		let calc4 = Fraction.new(Const.i1(), Const.i1());
		let calc5 = Fraction.new(Const.i1(), Const.i1());
		let calc6 = Fraction.new(Const.i1(), Const.i1());
		let tickPoints = Array.new(20);

		let i = 0;
		while (i < 20){
			if ((i < 7) | ((i > 13) & (i < 17))){
				let isPos = false;
				if (i < 7) {
					let mult = 7 - i;
				} else {
					let mult = 17 - i;
				}
			} else {
				let isPos = true;
				if (i < 14) {
					let mult = i - 6;
				} else {
					let mult = i - 16;
				}
			}

			let label = Fraction.new(Int.new(isPos, mult * 32), Const.i1());
			let tickPoints[i] = Fraction.new(Const.i1(), Const.i1());
			do Fraction.multiply(scale, label, tickPoints[i], calc1, calc2, calc3, calc4, calc5, calc6);
			let i = i + 1;
		}

		return tickPoints;
	}
}
