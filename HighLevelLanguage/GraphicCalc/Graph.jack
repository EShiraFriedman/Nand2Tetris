class Graph {
	static Equation equation;
	static Point currPoint;
	static Fraction currX, currY;
	static Int iX, iY, iIndex;
	static Coord coord;

	/** Constructs a new graph */
  constructor Graph new() {
    return this;
  }

	function void init() {
		do Int.init();
	  let currPoint = Point.new(Const.i1(), Const.i1());
		let currX = Fraction.new(Const.i1(), Const.i1());
		let currY = Fraction.new(Const.i1(), Const.i1());
		let iX = Int.new(true, 1);
		let iY = Int.new(true, 1);
		let iIndex = Int.new(true, 1);
		let coord = currPoint.toCoord();
		return;
	}
	/** Draws x- and y-axes with arrows */
	function void drawAxes() {
    // x-axis
    do Screen.drawLine(255, 0, 255, 255);

    // y-axis
    do Screen.drawLine(0, 127, 511, 127);

    // left arrow
    do Screen.drawLine(4, 124, 0, 127);
    do Screen.drawLine(4, 130, 0, 127);

    // right arrow
    do Screen.drawLine(507, 124, 511, 127);
    do Screen.drawLine(507, 130, 511, 127);

    // top arrow
    do Screen.drawLine(252, 4, 255, 0);
    do Screen.drawLine(258, 4, 255, 0);

    // bottom arrow
    do Screen.drawLine(252, 251, 255, 255);
    do Screen.drawLine(258, 251, 255, 255);

    return;
  }

/** Returns an equation comparable to the given equation but scaled to fit within (-255, -127) to (255, 127) */
  function Equation getScaledLine(Equation e) {
    var Fraction CUTOFF, TWO, ONESEVENTY, yIncpt, xIncpt, xIncptTwice,
    scale, b, m, cutoffTotal, newB, calc1, calc2;
    var Equation scaledEquation;
    var boolean xIsGreater;
		let CUTOFF = Fraction.new(Int.new(true, 3), Const.i2());
		let ONESEVENTY = Fraction.new(Int.new(true, 170), Const.i1());
		let TWO = Fraction.new(Const.i2(), Const.i1());
		let calc1 = Fraction.new(Const.i1(), Const.i1());
		let calc2 = Fraction.new(Const.i1(), Const.i1());
		let newB = Fraction.new(Const.i1(), Const.i1());
    let yIncpt = e.getYIntercept();
//    do Out.log("e.yIncpt = ", yIncpt.toString());
    let xIncpt = e.getXIntercept();
//    do Out.log("e.xIncpt = ", xIncpt.toString());
		do yIncpt.checkValid();
		do xIncpt.checkValid();
		let scaledEquation = Equation.convertToSlopeIntercept(e);
		let xIncptTwice = Fraction.new(Const.i1(), Const.i1());
		do Fraction.multiply(xIncpt, TWO, xIncptTwice, calc1, calc2);
//		let xIncptTwice = xIncpt.times(TWO);
		if(xIncptTwice.isGreaterThan(yIncpt)){
			let xIsGreater = true;
			let m = scaledEquation.getSlope();
			do Fraction.multiply(m, ONESEVENTY, newB, calc1, calc2);
//			let newB = m.times(ONESEVENTY);
		} else {
			let b = scaledEquation.getYIntercept();
			let xIsGreater = false;
			let cutoffTotal = Fraction.new(Const.i1(), Const.i1());
			let scale = Fraction.new(Const.i1(), Const.i1());
			do Fraction.multiply(CUTOFF, b, cutoffTotal, calc1, calc2);
//			let cutoffTotal = CUTOFF.times(b);
			do Fraction.multiply(cutoffTotal, Const.f127th(), scale, calc1, calc2);
//			let scale = cutoffTotal.times(Const.f127th());
			do Fraction.multiply(scale, b, newB, calc1, calc2);
//			let newB = scale.times(b);
		}
		do scaledEquation.setB(newB);
		do scaledEquation.setXIsScreenCutoff(xIsGreater);

    return scaledEquation;
  }

	/** Draws a line using an equation scaled to fit within (-255, -127) to (255, 127) */
	function void drawScaledLine(Equation e) {
		let equation = e;
		if (equation.getXIsScreenCutoff()) {
			do Graph.drawXCutoffLine(0, 511);
//			do Graph.drawXCutoffLine(200, 205);
		} else {
			do Graph.drawYCutoffLine(0, 255);
//			do Graph.drawYCutoffLine(100, 105);
		}
		return;
	}


	function void drawYCutoffLine(int i, int j) {
    var Int deltaI;
    while(i < j){
      do iIndex.setPos(true);
      do iIndex.setNum(i);
      let deltaI = iIndex.minus(Const.i127());
      do currY.set(deltaI, Const.i1());
      let currX = equation.solveForX(currY);
      do Graph.drawValidScaledPoint();
      let i = i + 1;
    }

    return;
	}

	function void drawXCutoffLine(int i, int j) {
		var Int deltaI, cons;
    while(i < j){
      do iIndex.setPos(true);
      do iIndex.setNum(i);
      let deltaI = iIndex.minus(Const.i255());
      do currX.set(deltaI, Const.i1());
      let currY = equation.solveForY(currX);
      do Graph.drawValidScaledPoint();
			let i = i + 1;
    }
		return;
	}

	function void drawValidScaledPoint() {
		do iX.setPos(currX.pos());
		do iX.setNum(currX.toInt());
		do iY.setPos(currY.pos());
		do iY.setNum(currY.toInt());
		do currPoint.setX(iX);
		do currPoint.setY(iY);
//		do Out.ln(currPoint.toString());
    if (currPoint.isValidPoint()){
      do Graph.drawPoint();
    }
  	return;
	}

	 function void drawPoint() {
      let coord = currPoint.toCoord();
//      do Out.log(" --> ", coord.toString());
      do Graph.drawPixel();
      return;
    }

    function void drawPixel() {
      if (coord.isValidCoord()) {
        do Screen.drawPixel(coord.x(), coord.y());
      }
        return;
    }

}
