class Graph {
	field Int ONETWENTYSEVEN, NEG127, TWOFIFTYFIVE, NEG255, TWO;

	/** Constructs a new graph */
  constructor Graph new() {
    let ONETWENTYSEVEN = Int.new(true, 127);
    let NEG127 = Int.new(false, 127);
    let TWOFIFTYFIVE = Int.new(true, 255);
    let NEG255 = Int.new(false, 255);
    let TWO = Int.new(true, 2);
    return this;
  }

  function void drawPixel(Coord coord) {
    if (coord.isValidCoord()) {
      do Screen.drawPixel(coord.x(), coord.y());
    }
        return;
  }

  function void drawGraph() {
		return;
  }

	/** Draws x- and y-axes with arrows */
	function void drawAxes() {
    // x-axis
    do Screen.drawLine(255, 0, 255, 255);

    // y-axis
    do Screen.drawLine(0, 127, 511, 127);

    // left arrow
    do Screen.drawLine(4, 124, 0, 127);
    do Screen.drawLine(4, 130, 0, 127);

    // right arrow
    do Screen.drawLine(507, 124, 511, 127);
    do Screen.drawLine(507, 130, 511, 127);

    // top arrow
    do Screen.drawLine(252, 4, 255, 0);
    do Screen.drawLine(258, 4, 255, 0);

    // bottom arrow
    do Screen.drawLine(252, 251, 255, 255);
    do Screen.drawLine(258, 251, 255, 255);

    return;
  }

  function void drawPoint(Int x, Int y) {
    var Point p;
    let p = Point.new(x, y);
    let p = p.toCoord();
    do p.drawPixel();
    return;
  }

// TODO: CONTINUE FROM HERE - CONVERTING EVERYTHING TO USE MY NEW INT OBJECT
  function void drawLine(Equation equation) {
    var Fraction slope;
    var int xIncrease, yIncrease;
    var Point start, end, curr;
    var int x, y;
    let slope = equation.getSlope();
    let xIncrease = slope.getDenominator();
    let yIncrease = slope.getNumerator();
    let start = equation.getLowestPoint();
    let end = equation.getHighestPoint();
    let x = start.x();
    let y = start.y();
    while(x < end.x()){
      do Graph.drawPoint(x, y);
      let x = x + xIncrease;
      let y = y + yIncrease;
      do Sys.wait(10);
    }
		return;
  }

	function Point getStartingLeftPoint(Fraction scale, Equation e) {
		var Fraction y, x, two55;
		var int xInt, yInt;
		var Point p;
		let two55 = Fraction.new(NEG255, 1);
		let x = two55.dividedBy(scale);
		let y = e.solveForY(x);
			let xInt = x.getNumerator()/x.getDenominator();
      		let yInt = y.getNumerator()/y.getDenominator();
      		let p = Point.new(xInt, yInt);
		return p;
	}
	function Point getEndingRightPoint(Fraction scale, Equation e) {
  		var Fraction y, x;
  				var int xInt, yInt;
  		var Point p;
 //  		let TWOFIFTYFIVE = Fraction.new(255, 1);
  		let x = TWOFIFTYFIVE.dividedBy(scale);
  		let y = e.solveForY(x);
  			let xInt = x.getNumerator()/x.getDenominator();
        		let yInt = y.getNumerator()/y.getDenominator();
        		let p = Point.new(xInt, yInt);
  		return p;
  	}

	function Point getStartingBottomPoint(Fraction scale, Equation e) {
		var Fraction y, x;
		var int xInt, yInt;
  		var Point p;
//  		let ONETWENTYSEVEN = Fraction.new(-127, 1);
  		let y = NEG127.dividedBy(scale);
  		let x = e.solveForX(y);
  		let xInt = x.getNumerator()/x.getDenominator();
  		let yInt = y.getNumerator()/y.getDenominator();
  		let p = Point.new(xInt, yInt);
  		return p;
	}

	function Point getEndingTopPoint(Fraction scale, Equation e) {
  		var Fraction y, x, one27;
  		var int xInt, yInt;
    		var Point p;
   		let one27 = Fraction.new(ONETWENTYSEVEN, 1);

    		let y = one27.dividedBy(scale);
    		let x = e.solveForX(y);
    		let xInt = x.getNumerator()/x.getDenominator();
    		let yInt = y.getNumerator()/y.getDenominator();
    		let p = Point.new(xInt, yInt);
    		return p;
  	}


  function void getScaledLine(Equation e) {
    var Fraction yIncpt, xIncpt, xIncptTwice, limXAxis, limYAxis, scale, comparator, CUTOFF, scaledX, scaledY;
    var int scaledXIncpt, scaledYIncpt;
    let yIncpt = e.getYIntercept();
    let xIncpt = e.getXIntercept();
		do yIncpt.checkValid();
		do xIncpt.checkValid();

		let CUTOFF = Fraction.new(3, 2);
\\ 		let TWO = Fraction.new(2, 1);
		let TWOFIFTYSIX = Fraction.new(256, 1);
\\ 		let ONETWENTYEIGHT = Fraction.new(128, 1);
		let xIncptTwice = xIncpt.times(TWO);
		if(xIncptTwice.isGreaterThan(yIncpt)){
			let limXAxis = CUTOFF.times(xIncpt);
			let limYAxis = CUTOFF.times(xIncpt.dividedBy(TWO));
			let scale = TWOFIFTYFIVE.dividedBy(limXAxis);
			let comparator = limXAxis;
		} else {
			let limYAxis = CUTOFF.times(yIncpt);
     	let limXAxis = CUTOFF.times(yIncpt.times(TWO));
 			let scale = ONETWENTYSEVEN.dividedBy(limYAxis);
 			let comparator = limYAxis;
		}
		let scaledX = xIncpt.times(scale);
		let scaledY = yIncpt.times(scale);
		let scaledM =
		let scaledXIncpt=scaledX.toInt();
		let scaledYIncpt=scaledY.toInt();

//
//		do Out.ln(limYAxis.toString());
//		do Out.ln(limXAxis.toString());
//		do Out.ln(scale.toString());
//		do Out.ln(comparator.toString());
return;
  }
}


/**
(Get xIncpt and yIncpt)
if either is <.0001 or >10000, throw an error (it may already do that)
(Let cutoff=1.5 or other const)
 (if(2xIncpt>yIncpt)
        limXAxis=cutoff*xIncpt
        limYAxis=cutoff*xIncpt/2;
        scale=256/limXAxis;
        h2=limXAxis
else
        limYAxis=cutoff*yIncpt;
        limXAxis=cutoff*yIncpt*2
        scale=128/limYAxis;
        h2=limYAxis
        )
get scaledIncpts
get tickmarks

get x of -limXAxis if xincept is greatest
get y of -limYAxis if yincept is greatest
from each until the positives of those, plot each point through to the end of the line





needs a floor function

get scaledIncpts(
scaledXIncpt=floor(xIncpt*scale)
scaledYIncpt=floor(yIncpt*scale)


get tick marks:

tickDist=if(H2<0.0001, "too small", if(H2<0.001, 0.0001 , if(H2<0.01, 0.001, if(H2<0.1, 0.01, if(H2<1, 0.1, if(H2<10, 1, if(H2<100, 10, if(H2<1000, 100, if(H2<10000, 1000, "too high")))))))))
scaledTickDist=tickDist*scale

let dist=scaledTickDist,
while dist < 256
        draw tickmark going up down at dist,0
        draw tickmark going up down at -dist,0
        if dist < 128
                draw tickmark going left right at 0, dist
                draw tickmark going left right at 0, -dist
        increase dist by scaledTickDist

}*/