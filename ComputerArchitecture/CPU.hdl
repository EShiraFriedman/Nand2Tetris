/**
 * Using Hardware Description Language, design the Hack CPU (Central 
 * Processing unit), consisting of an ALU, two registers named 
 * A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
		
		//if c-instruction, feed from registers; if a-instruction, load new address		
		Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=inA);
		Not(in=instruction[15], out=notc);
		Or(a=notc, b=instruction[5], out=writeA);
		ARegister(in=inA, load=writeA, out=outA, out[0..14]=addressM);
		
		And(a=instruction[15], b=instruction[4], out=writeD);
		
		DRegister(in=inD, load=writeD, out=outD);
		
		And(a=instruction[15], b=instruction[3], out=writeM);
			
		Mux16(a=outA, b=inM, sel=instruction[12], out=outAM);
		
		And(a=instruction[2],b=ng,out=jumpcond1);
		And(a=instruction[1],b=zr,out=jumpcond2);
		Or(a=zr, b=ng, out=zrOrng);
		Not(in=zrOrng, out=notzrAndNotng);
		And(a=notzrAndNotng, b=instruction[0], out=jumpcond3);
		Or(a=jumpcond1,b=jumpcond2,out=jumpcond1Or2);
		Or(a=jumpcond1Or2,b=jumpcond3,out=jump);//jump?
		
		And(a=instruction[15],b=jump,out=loadjump);//and it is a c-instruction?
		
		PC(in=outA, load=loadjump, inc=true, reset=reset, out[0..14]=pc);
		
		
		ALU(
			x=outD, 
			y=outAM, 
			zx=instruction[11], 
			nx=instruction[10], 
			zy=instruction[9], 
			ny=instruction[8], 
			f=instruction[7], 
			no=instruction[6], 
			
			out=outM, 
			out=inD, 
			out=ALUoutput, 
			zr=zr, 
			ng=ng);	
}
